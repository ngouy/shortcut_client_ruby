=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Shortcut::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = Shortcut::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(Shortcut::DefaultApi)
    end
  end

  # unit tests for create_category
  # Create Category
  # Create Category allows you to create a new Category in Shortcut.
  # @param create_category 
  # @param [Hash] opts the optional parameters
  # @return [Category]
  describe 'create_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_entity_template
  # Create Entity Template
  # Create a new entity template for your organization.
  # @param create_entity_template Request paramaters for creating an entirely new entity template.
  # @param [Hash] opts the optional parameters
  # @return [EntityTemplate]
  describe 'create_entity_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_epic
  # Create Epic
  # Create Epic allows you to create a new Epic in Shortcut.
  # @param create_epic 
  # @param [Hash] opts the optional parameters
  # @return [Epic]
  describe 'create_epic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_epic_comment
  # Create Epic Comment
  # This endpoint allows you to create a threaded Comment on an Epic.
  # @param epic_public_id The ID of the associated Epic.
  # @param create_epic_comment 
  # @param [Hash] opts the optional parameters
  # @return [ThreadedComment]
  describe 'create_epic_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_epic_comment_comment
  # Create Epic Comment Comment
  # This endpoint allows you to create a nested Comment reply to an existing Epic Comment.
  # @param epic_public_id The ID of the associated Epic.
  # @param comment_public_id The ID of the parent Epic Comment.
  # @param create_comment_comment 
  # @param [Hash] opts the optional parameters
  # @return [ThreadedComment]
  describe 'create_epic_comment_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_group
  # Create Group
  # @param create_group 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'create_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_iteration
  # Create Iteration
  # @param create_iteration 
  # @param [Hash] opts the optional parameters
  # @return [Iteration]
  describe 'create_iteration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_label
  # Create Label
  # Create Label allows you to create a new Label in Shortcut.
  # @param create_label_params Request parameters for creating a Label on a Shortcut Story.
  # @param [Hash] opts the optional parameters
  # @return [Label]
  describe 'create_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_linked_file
  # Create Linked File
  # Create Linked File allows you to create a new Linked File in Shortcut.
  # @param create_linked_file 
  # @param [Hash] opts the optional parameters
  # @return [LinkedFile]
  describe 'create_linked_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_milestone
  # Create Milestone
  # Create Milestone allows you to create a new Milestone in Shortcut.
  # @param create_milestone 
  # @param [Hash] opts the optional parameters
  # @return [Milestone]
  describe 'create_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_multiple_stories
  # Create Multiple Stories
  # Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://shortcut.com/api/#create-story).
  # @param create_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'create_multiple_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_project
  # Create Project
  # Create Project is used to create a new Shortcut Project.
  # @param create_project 
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'create_project test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_story
  # Create Story
  # Create Story is used to add a new story to your Shortcut.
  # @param create_story_params Request parameters for creating a story.
  # @param [Hash] opts the optional parameters
  # @return [Story]
  describe 'create_story test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_story_comment
  # Create Story Comment
  # Create Comment allows you to create a Comment on any Story.
  # @param story_public_id The ID of the Story that the Comment is in.
  # @param create_story_comment 
  # @param [Hash] opts the optional parameters
  # @return [StoryComment]
  describe 'create_story_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_story_link
  # Create Story Link
  # Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -&gt; verb -&gt; object.  The subject story acts on the object Story; the object story is the direct object of the sentence.  The subject story \&quot;blocks\&quot;, \&quot;duplicates\&quot;, or \&quot;relates to\&quot; the object story.  Examples: - \&quot;story 5 blocks story 6” -- story 6 is now \&quot;blocked\&quot; until story 5 is moved to a Done workflow state. - \&quot;story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived). - \&quot;story 7 relates to story 3”
  # @param create_story_link 
  # @param [Hash] opts the optional parameters
  # @return [StoryLink]
  describe 'create_story_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_story_reaction
  # Create Story Reaction
  # Create a reaction to a story comment.
  # @param story_public_id The ID of the Story that the Comment is in.
  # @param comment_public_id The ID of the Comment.
  # @param create_or_delete_story_reaction 
  # @param [Hash] opts the optional parameters
  # @return [Array<StoryReaction>]
  describe 'create_story_reaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_task
  # Create Task
  # Create Task is used to create a new task in a Story.
  # @param story_public_id The ID of the Story that the Task will be in.
  # @param create_task 
  # @param [Hash] opts the optional parameters
  # @return [Task]
  describe 'create_task test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_category
  # Delete Category
  # Delete Category can be used to delete any Category.
  # @param category_public_id The unique ID of the Category.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_entity_template
  # Delete Entity Template
  # @param entity_template_public_id The unique ID of the entity template.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_entity_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_epic
  # Delete Epic
  # Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.
  # @param epic_public_id The unique ID of the Epic.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_epic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_epic_comment
  # Delete Epic Comment
  # This endpoint allows you to delete a Comment from an Epic.
  # @param epic_public_id The ID of the associated Epic.
  # @param comment_public_id The ID of the Comment.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_epic_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_file
  # Delete File
  # Delete File deletes a previously uploaded file.
  # @param file_public_id The File’s unique ID.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_iteration
  # Delete Iteration
  # @param iteration_public_id The unique ID of the Iteration.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_iteration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_label
  # Delete Label
  # Delete Label can be used to delete any Label.
  # @param label_public_id The unique ID of the Label.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_linked_file
  # Delete Linked File
  # Delete Linked File can be used to delete any previously attached Linked-File.
  # @param linked_file_public_id The unique identifier of the linked file.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_linked_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_milestone
  # Delete Milestone
  # Delete Milestone can be used to delete any Milestone.
  # @param milestone_public_id The ID of the Milestone.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_multiple_stories
  # Delete Multiple Stories
  # Delete Multiple Stories allows you to delete multiple archived stories at once.
  # @param delete_stories 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_multiple_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_project
  # Delete Project
  # Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.
  # @param project_public_id The unique ID of the Project.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_project test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_story
  # Delete Story
  # Delete Story can be used to delete any Story.
  # @param story_public_id The ID of the Story.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_story test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_story_comment
  # Delete Story Comment
  # Delete a Comment from any story.
  # @param story_public_id The ID of the Story that the Comment is in.
  # @param comment_public_id The ID of the Comment.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_story_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_story_link
  # Delete Story Link
  # Removes the relationship between the stories for the given Story Link.
  # @param story_link_public_id The unique ID of the Story Link.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_story_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_story_reaction
  # Delete Story Reaction
  # Delete a reaction from any story comment.
  # @param story_public_id The ID of the Story that the Comment is in.
  # @param comment_public_id The ID of the Comment.
  # @param create_or_delete_story_reaction 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_story_reaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_task
  # Delete Task
  # Delete Task can be used to delete any previously created Task on a Story.
  # @param story_public_id The unique ID of the Story this Task is associated with.
  # @param task_public_id The unique ID of the Task.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_task test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_groups
  # Disable Groups
  # Disables Groups for the current workspace2
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_iterations
  # Disable Iterations
  # Disables Iterations for the current workspace
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_iterations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_story_templates
  # Disable Story Templates
  # Disables the Story Template feature for the given Organization.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_story_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_groups
  # Enable Groups
  # Enables Groups for the current workspace2
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'enable_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_iterations
  # Enable Iterations
  # Enables Iterations for the current workspace
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'enable_iterations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_story_templates
  # Enable Story Templates
  # Enables the Story Template feature for the given Organization.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'enable_story_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_category
  # Get Category
  # Get Category returns information about the selected Category.
  # @param category_public_id The unique ID of the Category.
  # @param [Hash] opts the optional parameters
  # @return [Category]
  describe 'get_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_member_info
  # Get Current Member Info
  # Returns information about the authenticated member.
  # @param [Hash] opts the optional parameters
  # @return [MemberInfo]
  describe 'get_current_member_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_entity_template
  # Get Entity Template
  # Get Entity Template returns information about a given entity template.
  # @param entity_template_public_id The unique ID of the entity template.
  # @param [Hash] opts the optional parameters
  # @return [EntityTemplate]
  describe 'get_entity_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_epic
  # Get Epic
  # Get Epic returns information about the selected Epic.
  # @param epic_public_id The unique ID of the Epic.
  # @param [Hash] opts the optional parameters
  # @return [Epic]
  describe 'get_epic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_epic_comment
  # Get Epic Comment
  # This endpoint returns information about the selected Epic Comment.
  # @param epic_public_id The ID of the associated Epic.
  # @param comment_public_id The ID of the Comment.
  # @param [Hash] opts the optional parameters
  # @return [ThreadedComment]
  describe 'get_epic_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_epic_workflow
  # Get Epic Workflow
  # Get Epic Workflow returns the Epic Workflow for the organization.
  # @param [Hash] opts the optional parameters
  # @return [EpicWorkflow]
  describe 'get_epic_workflow test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_external_link_stories
  # Get External Link Stories
  # Get Stories which have a given External Link associated with them.
  # @param get_external_link_stories_params 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'get_external_link_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file
  # Get File
  # Get File returns information about the selected UploadedFile.
  # @param file_public_id The File’s unique ID.
  # @param [Hash] opts the optional parameters
  # @return [UploadedFile]
  describe 'get_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_group
  # Get Group
  # @param group_public_id The unique ID of the Group.
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'get_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_iteration
  # Get Iteration
  # @param iteration_public_id The unique ID of the Iteration.
  # @param [Hash] opts the optional parameters
  # @return [Iteration]
  describe 'get_iteration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_label
  # Get Label
  # Get Label returns information about the selected Label.
  # @param label_public_id The unique ID of the Label.
  # @param [Hash] opts the optional parameters
  # @return [Label]
  describe 'get_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_linked_file
  # Get Linked File
  # Get File returns information about the selected Linked File.
  # @param linked_file_public_id The unique identifier of the linked file.
  # @param [Hash] opts the optional parameters
  # @return [LinkedFile]
  describe 'get_linked_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_member
  # Get Member
  # Returns information about a Member.
  # @param member_public_id The Member&#39;s unique ID.
  # @param get_member 
  # @param [Hash] opts the optional parameters
  # @return [Member]
  describe 'get_member test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_milestone
  # Get Milestone
  # Get Milestone returns information about a chosen Milestone.
  # @param milestone_public_id The ID of the Milestone.
  # @param [Hash] opts the optional parameters
  # @return [Milestone]
  describe 'get_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_project
  # Get Project
  # Get Project returns information about the selected Project.
  # @param project_public_id The unique ID of the Project.
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'get_project test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repository
  # Get Repository
  # Get Repository returns information about the selected Repository.
  # @param repo_public_id The unique ID of the Repository.
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'get_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_story
  # Get Story
  # Get Story returns information about a chosen Story.
  # @param story_public_id The ID of the Story.
  # @param [Hash] opts the optional parameters
  # @return [Story]
  describe 'get_story test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_story_comment
  # Get Story Comment
  # Get Comment is used to get Comment information.
  # @param story_public_id The ID of the Story that the Comment is in.
  # @param comment_public_id The ID of the Comment.
  # @param [Hash] opts the optional parameters
  # @return [StoryComment]
  describe 'get_story_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_story_link
  # Get Story Link
  # Returns the stories and their relationship for the given Story Link.
  # @param story_link_public_id The unique ID of the Story Link.
  # @param [Hash] opts the optional parameters
  # @return [StoryLink]
  describe 'get_story_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_task
  # Get Task
  # Returns information about a chosen Task.
  # @param story_public_id The unique ID of the Story this Task is associated with.
  # @param task_public_id The unique ID of the Task.
  # @param [Hash] opts the optional parameters
  # @return [Task]
  describe 'get_task test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_workflow
  # Get Workflow
  # Get Workflow returns information about a chosen Workflow.
  # @param workflow_public_id The ID of the Workflow.
  # @param [Hash] opts the optional parameters
  # @return [Workflow]
  describe 'get_workflow test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_categories
  # List Categories
  # List Categories returns a list of all Categories and their attributes.
  # @param [Hash] opts the optional parameters
  # @return [Array<Category>]
  describe 'list_categories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_category_milestones
  # List Category Milestones
  # List Category Milestones returns a list of all Milestones with the Category.
  # @param category_public_id The unique ID of the Category.
  # @param [Hash] opts the optional parameters
  # @return [Array<Milestone>]
  describe 'list_category_milestones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_entity_templates
  # List Entity Templates
  # List all the entity templates for an organization.
  # @param [Hash] opts the optional parameters
  # @return [Array<EntityTemplate>]
  describe 'list_entity_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_epic_comments
  # List Epic Comments
  # Get a list of all Comments on an Epic.
  # @param epic_public_id The unique ID of the Epic.
  # @param [Hash] opts the optional parameters
  # @return [Array<ThreadedComment>]
  describe 'list_epic_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_epic_stories
  # List Epic Stories
  # Get a list of all Stories in an Epic.
  # @param epic_public_id The unique ID of the Epic.
  # @param get_epic_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'list_epic_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_epics
  # List Epics
  # List Epics returns a list of all Epics and their attributes.
  # @param list_epics 
  # @param [Hash] opts the optional parameters
  # @return [Array<EpicSlim>]
  describe 'list_epics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_files
  # List Files
  # List Files returns a list of all UploadedFiles in the workspace.
  # @param [Hash] opts the optional parameters
  # @return [Array<UploadedFile>]
  describe 'list_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_group_stories
  # List Group Stories
  # List the Stories assigned to the Group. (By default, limited to 1,000).
  # @param group_public_id The unique ID of the Group.
  # @param list_group_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'list_group_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_groups
  # List Groups
  # A group in our API maps to a \&quot;Team\&quot; within the Shortcut Product. A Team is a collection of Users that can be associated to Stories, Epics, and Iterations within Shortcut.
  # @param [Hash] opts the optional parameters
  # @return [Array<Group>]
  describe 'list_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_iteration_stories
  # List Iteration Stories
  # Get a list of all Stories in an Iteration.
  # @param iteration_public_id The unique ID of the Iteration.
  # @param get_iteration_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'list_iteration_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_iterations
  # List Iterations
  # @param [Hash] opts the optional parameters
  # @return [Array<IterationSlim>]
  describe 'list_iterations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_label_epics
  # List Label Epics
  # List all of the Epics with the Label.
  # @param label_public_id The unique ID of the Label.
  # @param [Hash] opts the optional parameters
  # @return [Array<EpicSlim>]
  describe 'list_label_epics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_label_stories
  # List Label Stories
  # List all of the Stories with the Label.
  # @param label_public_id The unique ID of the Label.
  # @param get_label_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'list_label_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_labels
  # List Labels
  # List Labels returns a list of all Labels and their attributes.
  # @param list_labels 
  # @param [Hash] opts the optional parameters
  # @return [Array<Label>]
  describe 'list_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_linked_files
  # List Linked Files
  # List Linked Files returns a list of all Linked-Files and their attributes.
  # @param [Hash] opts the optional parameters
  # @return [Array<LinkedFile>]
  describe 'list_linked_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_members
  # List Members
  # List Members returns information about members of the organization.
  # @param list_members 
  # @param [Hash] opts the optional parameters
  # @return [Array<Member>]
  describe 'list_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_milestone_epics
  # List Milestone Epics
  # List all of the Epics within the Milestone.
  # @param milestone_public_id The ID of the Milestone.
  # @param [Hash] opts the optional parameters
  # @return [Array<EpicSlim>]
  describe 'list_milestone_epics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_milestones
  # List Milestones
  # List Milestones returns a list of all Milestones and their attributes.
  # @param [Hash] opts the optional parameters
  # @return [Array<Milestone>]
  describe 'list_milestones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_projects
  # List Projects
  # List Projects returns a list of all Projects and their attributes.
  # @param [Hash] opts the optional parameters
  # @return [Array<Project>]
  describe 'list_projects test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_repositories
  # List Repositories
  # List Repositories returns a list of all Repositories and their attributes.
  # @param [Hash] opts the optional parameters
  # @return [Array<Repository>]
  describe 'list_repositories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_stories
  # List Stories
  # List Stories returns a list of all Stories in a selected Project and their attributes.
  # @param project_public_id The unique ID of the Project.
  # @param get_project_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'list_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_workflows
  # List Workflows
  # List Workflows returns a list of all Workflows in the organization.
  # @param [Hash] opts the optional parameters
  # @return [Array<Workflow>]
  describe 'list_workflows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # Search
  # Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the &#x60;next&#x60; value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
  # @param search 
  # @param [Hash] opts the optional parameters
  # @return [SearchResults]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_epics
  # Search Epics
  # Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the &#x60;next&#x60; value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
  # @param search 
  # @param [Hash] opts the optional parameters
  # @return [EpicSearchResults]
  describe 'search_epics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_stories
  # Search Stories
  # Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the &#x60;next&#x60; value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
  # @param search 
  # @param [Hash] opts the optional parameters
  # @return [StorySearchResults]
  describe 'search_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_stories_old
  # Search Stories (Old)
  # Search Stories lets you search Stories based on desired parameters.
  # @param search_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'search_stories_old test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for story_history
  # Story History
  # @param story_public_id The ID of the Story.
  # @param [Hash] opts the optional parameters
  # @return [Array<History>]
  describe 'story_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unlink_productboard_from_epic
  # Unlink Productboard from Epic
  # This endpoint allows you to unlink a productboard epic.
  # @param epic_public_id The unique ID of the Epic.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unlink_productboard_from_epic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_category
  # Update Category
  # Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.
  # @param category_public_id The unique ID of the Category you wish to update.
  # @param update_category 
  # @param [Hash] opts the optional parameters
  # @return [Category]
  describe 'update_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_entity_template
  # Update Entity Template
  # Update an entity template&#39;s name or its contents.
  # @param entity_template_public_id The unique ID of the template to be updated.
  # @param update_entity_template Request parameters for changing either a template&#39;s name or any of   the attributes it is designed to pre-populate.
  # @param [Hash] opts the optional parameters
  # @return [EntityTemplate]
  describe 'update_entity_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_epic
  # Update Epic
  # Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Shortcut UI.
  # @param epic_public_id The unique ID of the Epic.
  # @param update_epic 
  # @param [Hash] opts the optional parameters
  # @return [Epic]
  describe 'update_epic test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_epic_comment
  # Update Epic Comment
  # This endpoint allows you to update a threaded Comment on an Epic.
  # @param epic_public_id The ID of the associated Epic.
  # @param comment_public_id The ID of the Comment.
  # @param update_comment 
  # @param [Hash] opts the optional parameters
  # @return [ThreadedComment]
  describe 'update_epic_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_file
  # Update File
  # Update File updates the properties of an UploadedFile (but not its content).
  # @param file_public_id The unique ID assigned to the file in Shortcut.
  # @param update_file 
  # @param [Hash] opts the optional parameters
  # @return [UploadedFile]
  describe 'update_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_group
  # Update Group
  # @param group_public_id The unique ID of the Group.
  # @param update_group 
  # @param [Hash] opts the optional parameters
  # @return [Group]
  describe 'update_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_iteration
  # Update Iteration
  # @param iteration_public_id The unique ID of the Iteration.
  # @param update_iteration 
  # @param [Hash] opts the optional parameters
  # @return [Iteration]
  describe 'update_iteration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_label
  # Update Label
  # Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.
  # @param label_public_id The unique ID of the Label you wish to update.
  # @param update_label 
  # @param [Hash] opts the optional parameters
  # @return [Label]
  describe 'update_label test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_linked_file
  # Update Linked File
  # Updated Linked File allows you to update properties of a previously attached Linked-File.
  # @param linked_file_public_id The unique identifier of the linked file.
  # @param update_linked_file 
  # @param [Hash] opts the optional parameters
  # @return [LinkedFile]
  describe 'update_linked_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_milestone
  # Update Milestone
  # Update Milestone can be used to update Milestone properties.
  # @param milestone_public_id The ID of the Milestone.
  # @param update_milestone 
  # @param [Hash] opts the optional parameters
  # @return [Milestone]
  describe 'update_milestone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_multiple_stories
  # Update Multiple Stories
  # Update Multiple Stories allows you to make changes to numerous stories at once.
  # @param update_stories 
  # @param [Hash] opts the optional parameters
  # @return [Array<StorySlim>]
  describe 'update_multiple_stories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_project
  # Update Project
  # Update Project can be used to change properties of a Project.
  # @param project_public_id The unique ID of the Project.
  # @param update_project 
  # @param [Hash] opts the optional parameters
  # @return [Project]
  describe 'update_project test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_story
  # Update Story
  # Update Story can be used to update Story properties.
  # @param story_public_id The unique identifier of this story.
  # @param update_story 
  # @param [Hash] opts the optional parameters
  # @return [Story]
  describe 'update_story test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_story_comment
  # Update Story Comment
  # Update Comment replaces the text of the existing Comment.
  # @param story_public_id The ID of the Story that the Comment is in.
  # @param comment_public_id The ID of the Comment
  # @param update_story_comment 
  # @param [Hash] opts the optional parameters
  # @return [StoryComment]
  describe 'update_story_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_story_link
  # Update Story Link
  # Updates the stories and/or the relationship for the given Story Link.
  # @param story_link_public_id The unique ID of the Story Link.
  # @param update_story_link 
  # @param [Hash] opts the optional parameters
  # @return [StoryLink]
  describe 'update_story_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_task
  # Update Task
  # Update Task can be used to update Task properties.
  # @param story_public_id The unique identifier of the parent Story.
  # @param task_public_id The unique identifier of the Task you wish to update.
  # @param update_task 
  # @param [Hash] opts the optional parameters
  # @return [Task]
  describe 'update_task test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_files
  # Upload Files
  # Upload Files uploads one or many files and optionally associates them with a story.    Use the multipart/form-data content-type to upload.    Each &#x60;file&#x60; key should contain a separate file.    Each UploadedFile&#39;s name comes from the Content-Disposition header \&quot;filename\&quot; directive for that field.
  # @param file0 A file upload. At least one is required.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :story_id The story ID that these files will be associated with.
  # @option opts [File] :file1 Optional additional files.
  # @option opts [File] :file2 Optional additional files.
  # @option opts [File] :file3 Optional additional files.
  # @return [Array<UploadedFile>]
  describe 'upload_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
