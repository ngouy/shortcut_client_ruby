=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # EpicSlim represents the same resource as an Epic but is more light-weight, including all Epic fields except the comments array. The description string can be optionally included. Use the [Get Epic](#Get-Epic) endpoint to fetch the unabridged payload for an Epic.
  class EpicSlim
    # The Shortcut application url for the Epic.
    attr_accessor :app_url

    # The Epic's description.
    attr_accessor :description

    # True/false boolean that indicates whether the Epic is archived or not.
    attr_accessor :archived

    # A true/false boolean indicating if the Epic has been started.
    attr_accessor :started

    # A string description of this resource.
    attr_accessor :entity_type

    # An array of Labels attached to the Epic.
    attr_accessor :labels

    # Deprecated: use member_mention_ids.
    attr_accessor :mention_ids

    # An array of Member IDs that have been mentioned in the Epic description.
    attr_accessor :member_mention_ids

    # The IDs of Projects related to this Epic.
    attr_accessor :project_ids

    # The number of stories in this epic which are not associated with a project.
    attr_accessor :stories_without_projects

    # A manual override for the time/date the Epic was completed.
    attr_accessor :completed_at_override

    # The ID of the associated productboard integration.
    attr_accessor :productboard_plugin_id

    # The time/date the Epic was started.
    attr_accessor :started_at

    # The time/date the Epic was completed.
    attr_accessor :completed_at

    # The name of the Epic.
    attr_accessor :name

    # A true/false boolean indicating if the Epic has been completed.
    attr_accessor :completed

    # The URL of the associated productboard feature.
    attr_accessor :productboard_url

    # The Epic's planned start date.
    attr_accessor :planned_start_date

    # `Deprecated` The workflow state that the Epic is in.
    attr_accessor :state

    # The ID of the Milestone this Epic is related to.
    attr_accessor :milestone_id

    # The ID of the Member that requested the epic.
    attr_accessor :requested_by_id

    # The ID of the Epic State.
    attr_accessor :epic_state_id

    # An array of Label ids attached to the Epic.
    attr_accessor :label_ids

    # A manual override for the time/date the Epic was started.
    attr_accessor :started_at_override

    attr_accessor :group_id

    # The time/date the Epic was updated.
    attr_accessor :updated_at

    # An array of Group IDs that have been mentioned in the Epic description.
    attr_accessor :group_mention_ids

    # The ID of the associated productboard feature.
    attr_accessor :productboard_id

    # An array of UUIDs for any Members you want to add as Followers on this Epic.
    attr_accessor :follower_ids

    # An array of UUIDs for any members you want to add as Owners on this new Epic.
    attr_accessor :owner_ids

    # This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.
    attr_accessor :external_id

    # The unique ID of the Epic.
    attr_accessor :id

    # The Epic's relative position in the Epic workflow state.
    attr_accessor :position

    # The name of the associated productboard feature.
    attr_accessor :productboard_name

    # The Epic's deadline.
    attr_accessor :deadline

    attr_accessor :stats

    # The time/date the Epic was created.
    attr_accessor :created_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_url' => :'app_url',
        :'description' => :'description',
        :'archived' => :'archived',
        :'started' => :'started',
        :'entity_type' => :'entity_type',
        :'labels' => :'labels',
        :'mention_ids' => :'mention_ids',
        :'member_mention_ids' => :'member_mention_ids',
        :'project_ids' => :'project_ids',
        :'stories_without_projects' => :'stories_without_projects',
        :'completed_at_override' => :'completed_at_override',
        :'productboard_plugin_id' => :'productboard_plugin_id',
        :'started_at' => :'started_at',
        :'completed_at' => :'completed_at',
        :'name' => :'name',
        :'completed' => :'completed',
        :'productboard_url' => :'productboard_url',
        :'planned_start_date' => :'planned_start_date',
        :'state' => :'state',
        :'milestone_id' => :'milestone_id',
        :'requested_by_id' => :'requested_by_id',
        :'epic_state_id' => :'epic_state_id',
        :'label_ids' => :'label_ids',
        :'started_at_override' => :'started_at_override',
        :'group_id' => :'group_id',
        :'updated_at' => :'updated_at',
        :'group_mention_ids' => :'group_mention_ids',
        :'productboard_id' => :'productboard_id',
        :'follower_ids' => :'follower_ids',
        :'owner_ids' => :'owner_ids',
        :'external_id' => :'external_id',
        :'id' => :'id',
        :'position' => :'position',
        :'productboard_name' => :'productboard_name',
        :'deadline' => :'deadline',
        :'stats' => :'stats',
        :'created_at' => :'created_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_url' => :'String',
        :'description' => :'String',
        :'archived' => :'Boolean',
        :'started' => :'Boolean',
        :'entity_type' => :'String',
        :'labels' => :'Array<LabelSlim>',
        :'mention_ids' => :'Array<String>',
        :'member_mention_ids' => :'Array<String>',
        :'project_ids' => :'Array<Integer>',
        :'stories_without_projects' => :'Integer',
        :'completed_at_override' => :'Time',
        :'productboard_plugin_id' => :'String',
        :'started_at' => :'Time',
        :'completed_at' => :'Time',
        :'name' => :'String',
        :'completed' => :'Boolean',
        :'productboard_url' => :'String',
        :'planned_start_date' => :'Time',
        :'state' => :'String',
        :'milestone_id' => :'Integer',
        :'requested_by_id' => :'String',
        :'epic_state_id' => :'Integer',
        :'label_ids' => :'Array<Integer>',
        :'started_at_override' => :'Time',
        :'group_id' => :'String',
        :'updated_at' => :'Time',
        :'group_mention_ids' => :'Array<String>',
        :'productboard_id' => :'String',
        :'follower_ids' => :'Array<String>',
        :'owner_ids' => :'Array<String>',
        :'external_id' => :'String',
        :'id' => :'Integer',
        :'position' => :'Integer',
        :'productboard_name' => :'String',
        :'deadline' => :'Time',
        :'stats' => :'EpicStats',
        :'created_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'completed_at_override',
        :'productboard_plugin_id',
        :'started_at',
        :'completed_at',
        :'productboard_url',
        :'planned_start_date',
        :'milestone_id',
        :'started_at_override',
        :'group_id',
        :'updated_at',
        :'productboard_id',
        :'external_id',
        :'productboard_name',
        :'deadline',
        :'created_at'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::EpicSlim` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::EpicSlim`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_url')
        self.app_url = attributes[:'app_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'started')
        self.started = attributes[:'started']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'mention_ids')
        if (value = attributes[:'mention_ids']).is_a?(Array)
          self.mention_ids = value
        end
      end

      if attributes.key?(:'member_mention_ids')
        if (value = attributes[:'member_mention_ids']).is_a?(Array)
          self.member_mention_ids = value
        end
      end

      if attributes.key?(:'project_ids')
        if (value = attributes[:'project_ids']).is_a?(Array)
          self.project_ids = value
        end
      end

      if attributes.key?(:'stories_without_projects')
        self.stories_without_projects = attributes[:'stories_without_projects']
      end

      if attributes.key?(:'completed_at_override')
        self.completed_at_override = attributes[:'completed_at_override']
      end

      if attributes.key?(:'productboard_plugin_id')
        self.productboard_plugin_id = attributes[:'productboard_plugin_id']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.key?(:'productboard_url')
        self.productboard_url = attributes[:'productboard_url']
      end

      if attributes.key?(:'planned_start_date')
        self.planned_start_date = attributes[:'planned_start_date']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'milestone_id')
        self.milestone_id = attributes[:'milestone_id']
      end

      if attributes.key?(:'requested_by_id')
        self.requested_by_id = attributes[:'requested_by_id']
      end

      if attributes.key?(:'epic_state_id')
        self.epic_state_id = attributes[:'epic_state_id']
      end

      if attributes.key?(:'label_ids')
        if (value = attributes[:'label_ids']).is_a?(Array)
          self.label_ids = value
        end
      end

      if attributes.key?(:'started_at_override')
        self.started_at_override = attributes[:'started_at_override']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'group_mention_ids')
        if (value = attributes[:'group_mention_ids']).is_a?(Array)
          self.group_mention_ids = value
        end
      end

      if attributes.key?(:'productboard_id')
        self.productboard_id = attributes[:'productboard_id']
      end

      if attributes.key?(:'follower_ids')
        if (value = attributes[:'follower_ids']).is_a?(Array)
          self.follower_ids = value
        end
      end

      if attributes.key?(:'owner_ids')
        if (value = attributes[:'owner_ids']).is_a?(Array)
          self.owner_ids = value
        end
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'productboard_name')
        self.productboard_name = attributes[:'productboard_name']
      end

      if attributes.key?(:'deadline')
        self.deadline = attributes[:'deadline']
      end

      if attributes.key?(:'stats')
        self.stats = attributes[:'stats']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @app_url.nil?
        invalid_properties.push('invalid value for "app_url", app_url cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @started.nil?
        invalid_properties.push('invalid value for "started", started cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @labels.nil?
        invalid_properties.push('invalid value for "labels", labels cannot be nil.')
      end

      if @mention_ids.nil?
        invalid_properties.push('invalid value for "mention_ids", mention_ids cannot be nil.')
      end

      if @member_mention_ids.nil?
        invalid_properties.push('invalid value for "member_mention_ids", member_mention_ids cannot be nil.')
      end

      if @project_ids.nil?
        invalid_properties.push('invalid value for "project_ids", project_ids cannot be nil.')
      end

      if @stories_without_projects.nil?
        invalid_properties.push('invalid value for "stories_without_projects", stories_without_projects cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @completed.nil?
        invalid_properties.push('invalid value for "completed", completed cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @requested_by_id.nil?
        invalid_properties.push('invalid value for "requested_by_id", requested_by_id cannot be nil.')
      end

      if @epic_state_id.nil?
        invalid_properties.push('invalid value for "epic_state_id", epic_state_id cannot be nil.')
      end

      if @label_ids.nil?
        invalid_properties.push('invalid value for "label_ids", label_ids cannot be nil.')
      end

      if @group_mention_ids.nil?
        invalid_properties.push('invalid value for "group_mention_ids", group_mention_ids cannot be nil.')
      end

      if @follower_ids.nil?
        invalid_properties.push('invalid value for "follower_ids", follower_ids cannot be nil.')
      end

      if @owner_ids.nil?
        invalid_properties.push('invalid value for "owner_ids", owner_ids cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @position.nil?
        invalid_properties.push('invalid value for "position", position cannot be nil.')
      end

      if @stats.nil?
        invalid_properties.push('invalid value for "stats", stats cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @app_url.nil?
      return false if @archived.nil?
      return false if @started.nil?
      return false if @entity_type.nil?
      return false if @labels.nil?
      return false if @mention_ids.nil?
      return false if @member_mention_ids.nil?
      return false if @project_ids.nil?
      return false if @stories_without_projects.nil?
      return false if @name.nil?
      return false if @completed.nil?
      return false if @state.nil?
      return false if @requested_by_id.nil?
      return false if @epic_state_id.nil?
      return false if @label_ids.nil?
      return false if @group_mention_ids.nil?
      return false if @follower_ids.nil?
      return false if @owner_ids.nil?
      return false if @id.nil?
      return false if @position.nil?
      return false if @stats.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_url == o.app_url &&
          description == o.description &&
          archived == o.archived &&
          started == o.started &&
          entity_type == o.entity_type &&
          labels == o.labels &&
          mention_ids == o.mention_ids &&
          member_mention_ids == o.member_mention_ids &&
          project_ids == o.project_ids &&
          stories_without_projects == o.stories_without_projects &&
          completed_at_override == o.completed_at_override &&
          productboard_plugin_id == o.productboard_plugin_id &&
          started_at == o.started_at &&
          completed_at == o.completed_at &&
          name == o.name &&
          completed == o.completed &&
          productboard_url == o.productboard_url &&
          planned_start_date == o.planned_start_date &&
          state == o.state &&
          milestone_id == o.milestone_id &&
          requested_by_id == o.requested_by_id &&
          epic_state_id == o.epic_state_id &&
          label_ids == o.label_ids &&
          started_at_override == o.started_at_override &&
          group_id == o.group_id &&
          updated_at == o.updated_at &&
          group_mention_ids == o.group_mention_ids &&
          productboard_id == o.productboard_id &&
          follower_ids == o.follower_ids &&
          owner_ids == o.owner_ids &&
          external_id == o.external_id &&
          id == o.id &&
          position == o.position &&
          productboard_name == o.productboard_name &&
          deadline == o.deadline &&
          stats == o.stats &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_url, description, archived, started, entity_type, labels, mention_ids, member_mention_ids, project_ids, stories_without_projects, completed_at_override, productboard_plugin_id, started_at, completed_at, name, completed, productboard_url, planned_start_date, state, milestone_id, requested_by_id, epic_state_id, label_ids, started_at_override, group_id, updated_at, group_mention_ids, productboard_id, follower_ids, owner_ids, external_id, id, position, productboard_name, deadline, stats, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
