=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # A Group.
  class Group
    # The Shortcut application url for the Group.
    attr_accessor :app_url

    # The description of the Group.
    attr_accessor :description

    # Whether or not the Group is archived.
    attr_accessor :archived

    # A string description of this resource.
    attr_accessor :entity_type

    # The hex color to be displayed with the Group (for example, \"#ff0000\").
    attr_accessor :color

    # The number of stories assigned to the group which are in a started workflow state.
    attr_accessor :num_stories_started

    # The mention name of the Group.
    attr_accessor :mention_name

    # The name of the Group.
    attr_accessor :name

    # The color key to be displayed with the Group.
    attr_accessor :color_key

    # The total number of stories assigned ot the group.
    attr_accessor :num_stories

    # The number of epics assigned to the group which are in the started workflow state.
    attr_accessor :num_epics_started

    # The id of the Group.
    attr_accessor :id

    attr_accessor :display_icon

    # The Member IDs contain within the Group.
    attr_accessor :member_ids

    # The Workflow IDs which have stories assigned to the group.
    attr_accessor :story_workflow_ids

    # The Workflow IDs contained within the Group.
    attr_accessor :workflow_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_url' => :'app_url',
        :'description' => :'description',
        :'archived' => :'archived',
        :'entity_type' => :'entity_type',
        :'color' => :'color',
        :'num_stories_started' => :'num_stories_started',
        :'mention_name' => :'mention_name',
        :'name' => :'name',
        :'color_key' => :'color_key',
        :'num_stories' => :'num_stories',
        :'num_epics_started' => :'num_epics_started',
        :'id' => :'id',
        :'display_icon' => :'display_icon',
        :'member_ids' => :'member_ids',
        :'story_workflow_ids' => :'story_workflow_ids',
        :'workflow_ids' => :'workflow_ids'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_url' => :'String',
        :'description' => :'String',
        :'archived' => :'Boolean',
        :'entity_type' => :'String',
        :'color' => :'String',
        :'num_stories_started' => :'Integer',
        :'mention_name' => :'String',
        :'name' => :'String',
        :'color_key' => :'String',
        :'num_stories' => :'Integer',
        :'num_epics_started' => :'Integer',
        :'id' => :'String',
        :'display_icon' => :'Icon',
        :'member_ids' => :'Array<String>',
        :'story_workflow_ids' => :'Array<Integer>',
        :'workflow_ids' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'color',
        :'color_key',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::Group` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::Group`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_url')
        self.app_url = attributes[:'app_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'num_stories_started')
        self.num_stories_started = attributes[:'num_stories_started']
      end

      if attributes.key?(:'mention_name')
        self.mention_name = attributes[:'mention_name']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'color_key')
        self.color_key = attributes[:'color_key']
      end

      if attributes.key?(:'num_stories')
        self.num_stories = attributes[:'num_stories']
      end

      if attributes.key?(:'num_epics_started')
        self.num_epics_started = attributes[:'num_epics_started']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'display_icon')
        self.display_icon = attributes[:'display_icon']
      end

      if attributes.key?(:'member_ids')
        if (value = attributes[:'member_ids']).is_a?(Array)
          self.member_ids = value
        end
      end

      if attributes.key?(:'story_workflow_ids')
        if (value = attributes[:'story_workflow_ids']).is_a?(Array)
          self.story_workflow_ids = value
        end
      end

      if attributes.key?(:'workflow_ids')
        if (value = attributes[:'workflow_ids']).is_a?(Array)
          self.workflow_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @app_url.nil?
        invalid_properties.push('invalid value for "app_url", app_url cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @color.to_s.length < 1
        invalid_properties.push('invalid value for "color", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^#[a-fA-F0-9]{6}$/)
      if @color !~ pattern
        invalid_properties.push("invalid value for \"color\", must conform to the pattern #{pattern}.")
      end

      if @num_stories_started.nil?
        invalid_properties.push('invalid value for "num_stories_started", num_stories_started cannot be nil.')
      end

      if @mention_name.nil?
        invalid_properties.push('invalid value for "mention_name", mention_name cannot be nil.')
      end

      if @mention_name.to_s.length < 1
        invalid_properties.push('invalid value for "mention_name", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[a-z0-9\-\_\.]+$/)
      if @mention_name !~ pattern
        invalid_properties.push("invalid value for \"mention_name\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @num_stories.nil?
        invalid_properties.push('invalid value for "num_stories", num_stories cannot be nil.')
      end

      if @num_epics_started.nil?
        invalid_properties.push('invalid value for "num_epics_started", num_epics_started cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @display_icon.nil?
        invalid_properties.push('invalid value for "display_icon", display_icon cannot be nil.')
      end

      if @member_ids.nil?
        invalid_properties.push('invalid value for "member_ids", member_ids cannot be nil.')
      end

      if @story_workflow_ids.nil?
        invalid_properties.push('invalid value for "story_workflow_ids", story_workflow_ids cannot be nil.')
      end

      if @workflow_ids.nil?
        invalid_properties.push('invalid value for "workflow_ids", workflow_ids cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @app_url.nil?
      return false if @description.nil?
      return false if @archived.nil?
      return false if @entity_type.nil?
      return false if @color.to_s.length < 1
      return false if @color !~ Regexp.new(/^#[a-fA-F0-9]{6}$/)
      return false if @num_stories_started.nil?
      return false if @mention_name.nil?
      return false if @mention_name.to_s.length < 1
      return false if @mention_name !~ Regexp.new(/^[a-z0-9\-\_\.]+$/)
      return false if @name.nil?
      color_key_validator = EnumAttributeValidator.new('String', ["blue", "purple", "midnight-blue", "orange", "yellow-green", "brass", "gray", "fuchsia", "yellow", "pink", "sky-blue", "green", "red", "black", "slate", "turquoise"])
      return false unless color_key_validator.valid?(@color_key)
      return false if @num_stories.nil?
      return false if @num_epics_started.nil?
      return false if @id.nil?
      return false if @display_icon.nil?
      return false if @member_ids.nil?
      return false if @story_workflow_ids.nil?
      return false if @workflow_ids.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] color Value to be assigned
    def color=(color)
      if color.to_s.length < 1
        fail ArgumentError, 'invalid value for "color", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^#[a-fA-F0-9]{6}$/)
      if color !~ pattern
        fail ArgumentError, "invalid value for \"color\", must conform to the pattern #{pattern}."
      end

      @color = color
    end

    # Custom attribute writer method with validation
    # @param [Object] mention_name Value to be assigned
    def mention_name=(mention_name)
      if mention_name.nil?
        fail ArgumentError, 'mention_name cannot be nil'
      end

      if mention_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "mention_name", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-z0-9\-\_\.]+$/)
      if mention_name !~ pattern
        fail ArgumentError, "invalid value for \"mention_name\", must conform to the pattern #{pattern}."
      end

      @mention_name = mention_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] color_key Object to be assigned
    def color_key=(color_key)
      validator = EnumAttributeValidator.new('String', ["blue", "purple", "midnight-blue", "orange", "yellow-green", "brass", "gray", "fuchsia", "yellow", "pink", "sky-blue", "green", "red", "black", "slate", "turquoise"])
      unless validator.valid?(color_key)
        fail ArgumentError, "invalid value for \"color_key\", must be one of #{validator.allowable_values}."
      end
      @color_key = color_key
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_url == o.app_url &&
          description == o.description &&
          archived == o.archived &&
          entity_type == o.entity_type &&
          color == o.color &&
          num_stories_started == o.num_stories_started &&
          mention_name == o.mention_name &&
          name == o.name &&
          color_key == o.color_key &&
          num_stories == o.num_stories &&
          num_epics_started == o.num_epics_started &&
          id == o.id &&
          display_icon == o.display_icon &&
          member_ids == o.member_ids &&
          story_workflow_ids == o.story_workflow_ids &&
          workflow_ids == o.workflow_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_url, description, archived, entity_type, color, num_stories_started, mention_name, name, color_key, num_stories, num_epics_started, id, display_icon, member_ids, story_workflow_ids, workflow_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
