=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  class UpdateEpic
    # The Epic's description.
    attr_accessor :description

    # A true/false boolean indicating whether the Epic is in archived state.
    attr_accessor :archived

    # An array of Labels attached to the Epic.
    attr_accessor :labels

    # A manual override for the time/date the Epic was completed.
    attr_accessor :completed_at_override

    # The Epic's name.
    attr_accessor :name

    # The Epic's planned start date.
    attr_accessor :planned_start_date

    # `Deprecated` The Epic's state (to do, in progress, or done); will be ignored when `epic_state_id` is set.
    attr_accessor :state

    # The ID of the Milestone this Epic is related to.
    attr_accessor :milestone_id

    # The ID of the member that requested the epic.
    attr_accessor :requested_by_id

    # The ID of the Epic State.
    attr_accessor :epic_state_id

    # A manual override for the time/date the Epic was started.
    attr_accessor :started_at_override

    # The ID of the group to associate with the epic.
    attr_accessor :group_id

    # An array of UUIDs for any Members you want to add as Followers on this Epic.
    attr_accessor :follower_ids

    # An array of UUIDs for any members you want to add as Owners on this Epic.
    attr_accessor :owner_ids

    # The ID of the Epic we want to move this Epic before.
    attr_accessor :before_id

    # The ID of the Epic we want to move this Epic after.
    attr_accessor :after_id

    # The Epic's deadline.
    attr_accessor :deadline

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'description',
        :'archived' => :'archived',
        :'labels' => :'labels',
        :'completed_at_override' => :'completed_at_override',
        :'name' => :'name',
        :'planned_start_date' => :'planned_start_date',
        :'state' => :'state',
        :'milestone_id' => :'milestone_id',
        :'requested_by_id' => :'requested_by_id',
        :'epic_state_id' => :'epic_state_id',
        :'started_at_override' => :'started_at_override',
        :'group_id' => :'group_id',
        :'follower_ids' => :'follower_ids',
        :'owner_ids' => :'owner_ids',
        :'before_id' => :'before_id',
        :'after_id' => :'after_id',
        :'deadline' => :'deadline'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'description' => :'String',
        :'archived' => :'Boolean',
        :'labels' => :'Array<CreateLabelParams>',
        :'completed_at_override' => :'Time',
        :'name' => :'String',
        :'planned_start_date' => :'Time',
        :'state' => :'String',
        :'milestone_id' => :'Integer',
        :'requested_by_id' => :'String',
        :'epic_state_id' => :'Integer',
        :'started_at_override' => :'Time',
        :'group_id' => :'String',
        :'follower_ids' => :'Array<String>',
        :'owner_ids' => :'Array<String>',
        :'before_id' => :'Integer',
        :'after_id' => :'Integer',
        :'deadline' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'completed_at_override',
        :'planned_start_date',
        :'milestone_id',
        :'started_at_override',
        :'group_id',
        :'deadline'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::UpdateEpic` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::UpdateEpic`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'completed_at_override')
        self.completed_at_override = attributes[:'completed_at_override']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'planned_start_date')
        self.planned_start_date = attributes[:'planned_start_date']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'milestone_id')
        self.milestone_id = attributes[:'milestone_id']
      end

      if attributes.key?(:'requested_by_id')
        self.requested_by_id = attributes[:'requested_by_id']
      end

      if attributes.key?(:'epic_state_id')
        self.epic_state_id = attributes[:'epic_state_id']
      end

      if attributes.key?(:'started_at_override')
        self.started_at_override = attributes[:'started_at_override']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'follower_ids')
        if (value = attributes[:'follower_ids']).is_a?(Array)
          self.follower_ids = value
        end
      end

      if attributes.key?(:'owner_ids')
        if (value = attributes[:'owner_ids']).is_a?(Array)
          self.owner_ids = value
        end
      end

      if attributes.key?(:'before_id')
        self.before_id = attributes[:'before_id']
      end

      if attributes.key?(:'after_id')
        self.after_id = attributes[:'after_id']
      end

      if attributes.key?(:'deadline')
        self.deadline = attributes[:'deadline']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@description.nil? && @description.to_s.length > 100000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 100000.')
      end

      if !@name.nil? && @name.to_s.length > 256
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 256.')
      end

      if !@name.nil? && @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@description.nil? && @description.to_s.length > 100000
      return false if !@name.nil? && @name.to_s.length > 256
      return false if !@name.nil? && @name.to_s.length < 1
      state_validator = EnumAttributeValidator.new('String', ["in progress", "to do", "done"])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 100000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 100000.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 256
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 256.'
      end

      if !name.nil? && name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["in progress", "to do", "done"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          archived == o.archived &&
          labels == o.labels &&
          completed_at_override == o.completed_at_override &&
          name == o.name &&
          planned_start_date == o.planned_start_date &&
          state == o.state &&
          milestone_id == o.milestone_id &&
          requested_by_id == o.requested_by_id &&
          epic_state_id == o.epic_state_id &&
          started_at_override == o.started_at_override &&
          group_id == o.group_id &&
          follower_ids == o.follower_ids &&
          owner_ids == o.owner_ids &&
          before_id == o.before_id &&
          after_id == o.after_id &&
          deadline == o.deadline
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, archived, labels, completed_at_override, name, planned_start_date, state, milestone_id, requested_by_id, epic_state_id, started_at_override, group_id, follower_ids, owner_ids, before_id, after_id, deadline].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
