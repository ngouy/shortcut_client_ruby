=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # A Milestone is a collection of Epics that represent a release or some other large initiative that your organization is working on.
  class Milestone
    # The Shortcut application url for the Milestone.
    attr_accessor :app_url

    # The Milestone's description.
    attr_accessor :description

    # A true/false boolean indicating if the Milestone has been started.
    attr_accessor :started

    # A string description of this resource.
    attr_accessor :entity_type

    # A manual override for the time/date the Milestone was completed.
    attr_accessor :completed_at_override

    # The time/date the Milestone was started.
    attr_accessor :started_at

    # The time/date the Milestone was completed.
    attr_accessor :completed_at

    # The name of the Milestone.
    attr_accessor :name

    # A true/false boolean indicating if the Milestone has been completed.
    attr_accessor :completed

    # The workflow state that the Milestone is in.
    attr_accessor :state

    # A manual override for the time/date the Milestone was started.
    attr_accessor :started_at_override

    # The time/date the Milestone was updated.
    attr_accessor :updated_at

    # An array of Categories attached to the Milestone.
    attr_accessor :categories

    # The unique ID of the Milestone.
    attr_accessor :id

    # A number representing the position of the Milestone in relation to every other Milestone within the Organization.
    attr_accessor :position

    attr_accessor :stats

    # The time/date the Milestone was created.
    attr_accessor :created_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_url' => :'app_url',
        :'description' => :'description',
        :'started' => :'started',
        :'entity_type' => :'entity_type',
        :'completed_at_override' => :'completed_at_override',
        :'started_at' => :'started_at',
        :'completed_at' => :'completed_at',
        :'name' => :'name',
        :'completed' => :'completed',
        :'state' => :'state',
        :'started_at_override' => :'started_at_override',
        :'updated_at' => :'updated_at',
        :'categories' => :'categories',
        :'id' => :'id',
        :'position' => :'position',
        :'stats' => :'stats',
        :'created_at' => :'created_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_url' => :'String',
        :'description' => :'String',
        :'started' => :'Boolean',
        :'entity_type' => :'String',
        :'completed_at_override' => :'Time',
        :'started_at' => :'Time',
        :'completed_at' => :'Time',
        :'name' => :'String',
        :'completed' => :'Boolean',
        :'state' => :'String',
        :'started_at_override' => :'Time',
        :'updated_at' => :'Time',
        :'categories' => :'Array<Category>',
        :'id' => :'Integer',
        :'position' => :'Integer',
        :'stats' => :'MilestoneStats',
        :'created_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'completed_at_override',
        :'started_at',
        :'completed_at',
        :'started_at_override',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::Milestone` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::Milestone`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_url')
        self.app_url = attributes[:'app_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'started')
        self.started = attributes[:'started']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'completed_at_override')
        self.completed_at_override = attributes[:'completed_at_override']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'started_at_override')
        self.started_at_override = attributes[:'started_at_override']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'stats')
        self.stats = attributes[:'stats']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @app_url.nil?
        invalid_properties.push('invalid value for "app_url", app_url cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @started.nil?
        invalid_properties.push('invalid value for "started", started cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @completed.nil?
        invalid_properties.push('invalid value for "completed", completed cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @categories.nil?
        invalid_properties.push('invalid value for "categories", categories cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @position.nil?
        invalid_properties.push('invalid value for "position", position cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @app_url.nil?
      return false if @description.nil?
      return false if @started.nil?
      return false if @entity_type.nil?
      return false if @name.nil?
      return false if @completed.nil?
      return false if @state.nil?
      return false if @updated_at.nil?
      return false if @categories.nil?
      return false if @id.nil?
      return false if @position.nil?
      return false if @created_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_url == o.app_url &&
          description == o.description &&
          started == o.started &&
          entity_type == o.entity_type &&
          completed_at_override == o.completed_at_override &&
          started_at == o.started_at &&
          completed_at == o.completed_at &&
          name == o.name &&
          completed == o.completed &&
          state == o.state &&
          started_at_override == o.started_at_override &&
          updated_at == o.updated_at &&
          categories == o.categories &&
          id == o.id &&
          position == o.position &&
          stats == o.stats &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_url, description, started, entity_type, completed_at_override, started_at, completed_at, name, completed, state, started_at_override, updated_at, categories, id, position, stats, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
