=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  class SearchStories
    # A true/false boolean indicating whether the Story is in archived state.
    attr_accessor :archived

    # An array of UUIDs for any Users who may be Owners of the Stories.
    attr_accessor :owner_id

    # The type of Stories that you want returned.
    attr_accessor :story_type

    # The Epic IDs that may be associated with the Stories.
    attr_accessor :epic_ids

    # The IDs for the Projects the Stories may be assigned to.
    attr_accessor :project_ids

    # Stories should have been updated before this date.
    attr_accessor :updated_at_end

    # Stories should have been completed before this date.
    attr_accessor :completed_at_end

    # The type of Workflow State the Stories may be in.
    attr_accessor :workflow_state_types

    # Stories should have a deadline before this date.
    attr_accessor :deadline_end

    # Stories should have been created after this date.
    attr_accessor :created_at_start

    # The Epic IDs that may be associated with the Stories.
    attr_accessor :epic_id

    # The name of any associated Labels.
    attr_accessor :label_name

    # The UUID of any Users who may have requested the Stories.
    attr_accessor :requested_by_id

    # The Iteration ID that may be associated with the Stories.
    attr_accessor :iteration_id

    # The Label IDs that may be associated with the Stories.
    attr_accessor :label_ids

    # The Group ID that is associated with the Stories
    attr_accessor :group_id

    # The unique IDs of the specific Workflow States that the Stories should be in.
    attr_accessor :workflow_state_id

    # The Iteration IDs that may be associated with the Stories.
    attr_accessor :iteration_ids

    # Stories should have been created before this date.
    attr_accessor :created_at_end

    # Stories should have a deadline after this date.
    attr_accessor :deadline_start

    # The Group IDs that are associated with the Stories
    attr_accessor :group_ids

    # An array of UUIDs for any Users who may be Owners of the Stories.
    attr_accessor :owner_ids

    # An ID or URL that references an external resource. Useful during imports.
    attr_accessor :external_id

    # Whether to include the story description in the response.
    attr_accessor :includes_description

    # The number of estimate points associate with the Stories.
    attr_accessor :estimate

    # The IDs for the Projects the Stories may be assigned to.
    attr_accessor :project_id

    # Stories should have been competed after this date.
    attr_accessor :completed_at_start

    # Stories should have been updated after this date.
    attr_accessor :updated_at_start

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'archived' => :'archived',
        :'owner_id' => :'owner_id',
        :'story_type' => :'story_type',
        :'epic_ids' => :'epic_ids',
        :'project_ids' => :'project_ids',
        :'updated_at_end' => :'updated_at_end',
        :'completed_at_end' => :'completed_at_end',
        :'workflow_state_types' => :'workflow_state_types',
        :'deadline_end' => :'deadline_end',
        :'created_at_start' => :'created_at_start',
        :'epic_id' => :'epic_id',
        :'label_name' => :'label_name',
        :'requested_by_id' => :'requested_by_id',
        :'iteration_id' => :'iteration_id',
        :'label_ids' => :'label_ids',
        :'group_id' => :'group_id',
        :'workflow_state_id' => :'workflow_state_id',
        :'iteration_ids' => :'iteration_ids',
        :'created_at_end' => :'created_at_end',
        :'deadline_start' => :'deadline_start',
        :'group_ids' => :'group_ids',
        :'owner_ids' => :'owner_ids',
        :'external_id' => :'external_id',
        :'includes_description' => :'includes_description',
        :'estimate' => :'estimate',
        :'project_id' => :'project_id',
        :'completed_at_start' => :'completed_at_start',
        :'updated_at_start' => :'updated_at_start'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'archived' => :'Boolean',
        :'owner_id' => :'String',
        :'story_type' => :'String',
        :'epic_ids' => :'Array<Integer>',
        :'project_ids' => :'Array<Integer>',
        :'updated_at_end' => :'Time',
        :'completed_at_end' => :'Time',
        :'workflow_state_types' => :'Array<String>',
        :'deadline_end' => :'Time',
        :'created_at_start' => :'Time',
        :'epic_id' => :'Integer',
        :'label_name' => :'String',
        :'requested_by_id' => :'String',
        :'iteration_id' => :'Integer',
        :'label_ids' => :'Array<Integer>',
        :'group_id' => :'String',
        :'workflow_state_id' => :'Integer',
        :'iteration_ids' => :'Array<Integer>',
        :'created_at_end' => :'Time',
        :'deadline_start' => :'Time',
        :'group_ids' => :'Array<String>',
        :'owner_ids' => :'Array<String>',
        :'external_id' => :'String',
        :'includes_description' => :'Boolean',
        :'estimate' => :'Integer',
        :'project_id' => :'Integer',
        :'completed_at_start' => :'Time',
        :'updated_at_start' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'owner_id',
        :'epic_id',
        :'iteration_id',
        :'group_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::SearchStories` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::SearchStories`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.key?(:'story_type')
        self.story_type = attributes[:'story_type']
      end

      if attributes.key?(:'epic_ids')
        if (value = attributes[:'epic_ids']).is_a?(Array)
          self.epic_ids = value
        end
      end

      if attributes.key?(:'project_ids')
        if (value = attributes[:'project_ids']).is_a?(Array)
          self.project_ids = value
        end
      end

      if attributes.key?(:'updated_at_end')
        self.updated_at_end = attributes[:'updated_at_end']
      end

      if attributes.key?(:'completed_at_end')
        self.completed_at_end = attributes[:'completed_at_end']
      end

      if attributes.key?(:'workflow_state_types')
        if (value = attributes[:'workflow_state_types']).is_a?(Array)
          self.workflow_state_types = value
        end
      end

      if attributes.key?(:'deadline_end')
        self.deadline_end = attributes[:'deadline_end']
      end

      if attributes.key?(:'created_at_start')
        self.created_at_start = attributes[:'created_at_start']
      end

      if attributes.key?(:'epic_id')
        self.epic_id = attributes[:'epic_id']
      end

      if attributes.key?(:'label_name')
        self.label_name = attributes[:'label_name']
      end

      if attributes.key?(:'requested_by_id')
        self.requested_by_id = attributes[:'requested_by_id']
      end

      if attributes.key?(:'iteration_id')
        self.iteration_id = attributes[:'iteration_id']
      end

      if attributes.key?(:'label_ids')
        if (value = attributes[:'label_ids']).is_a?(Array)
          self.label_ids = value
        end
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'workflow_state_id')
        self.workflow_state_id = attributes[:'workflow_state_id']
      end

      if attributes.key?(:'iteration_ids')
        if (value = attributes[:'iteration_ids']).is_a?(Array)
          self.iteration_ids = value
        end
      end

      if attributes.key?(:'created_at_end')
        self.created_at_end = attributes[:'created_at_end']
      end

      if attributes.key?(:'deadline_start')
        self.deadline_start = attributes[:'deadline_start']
      end

      if attributes.key?(:'group_ids')
        if (value = attributes[:'group_ids']).is_a?(Array)
          self.group_ids = value
        end
      end

      if attributes.key?(:'owner_ids')
        if (value = attributes[:'owner_ids']).is_a?(Array)
          self.owner_ids = value
        end
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'includes_description')
        self.includes_description = attributes[:'includes_description']
      end

      if attributes.key?(:'estimate')
        self.estimate = attributes[:'estimate']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'completed_at_start')
        self.completed_at_start = attributes[:'completed_at_start']
      end

      if attributes.key?(:'updated_at_start')
        self.updated_at_start = attributes[:'updated_at_start']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@label_name.nil? && @label_name.to_s.length < 1
        invalid_properties.push('invalid value for "label_name", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      story_type_validator = EnumAttributeValidator.new('String', ["feature", "chore", "bug"])
      return false unless story_type_validator.valid?(@story_type)
      return false if !@label_name.nil? && @label_name.to_s.length < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] story_type Object to be assigned
    def story_type=(story_type)
      validator = EnumAttributeValidator.new('String', ["feature", "chore", "bug"])
      unless validator.valid?(story_type)
        fail ArgumentError, "invalid value for \"story_type\", must be one of #{validator.allowable_values}."
      end
      @story_type = story_type
    end

    # Custom attribute writer method with validation
    # @param [Object] epic_ids Value to be assigned
    def epic_ids=(epic_ids)
      @epic_ids = epic_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] project_ids Value to be assigned
    def project_ids=(project_ids)
      @project_ids = project_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] label_name Value to be assigned
    def label_name=(label_name)
      if !label_name.nil? && label_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "label_name", the character length must be great than or equal to 1.'
      end

      @label_name = label_name
    end

    # Custom attribute writer method with validation
    # @param [Object] label_ids Value to be assigned
    def label_ids=(label_ids)
      @label_ids = label_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] iteration_ids Value to be assigned
    def iteration_ids=(iteration_ids)
      @iteration_ids = iteration_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] group_ids Value to be assigned
    def group_ids=(group_ids)
      @group_ids = group_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] owner_ids Value to be assigned
    def owner_ids=(owner_ids)
      @owner_ids = owner_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          archived == o.archived &&
          owner_id == o.owner_id &&
          story_type == o.story_type &&
          epic_ids == o.epic_ids &&
          project_ids == o.project_ids &&
          updated_at_end == o.updated_at_end &&
          completed_at_end == o.completed_at_end &&
          workflow_state_types == o.workflow_state_types &&
          deadline_end == o.deadline_end &&
          created_at_start == o.created_at_start &&
          epic_id == o.epic_id &&
          label_name == o.label_name &&
          requested_by_id == o.requested_by_id &&
          iteration_id == o.iteration_id &&
          label_ids == o.label_ids &&
          group_id == o.group_id &&
          workflow_state_id == o.workflow_state_id &&
          iteration_ids == o.iteration_ids &&
          created_at_end == o.created_at_end &&
          deadline_start == o.deadline_start &&
          group_ids == o.group_ids &&
          owner_ids == o.owner_ids &&
          external_id == o.external_id &&
          includes_description == o.includes_description &&
          estimate == o.estimate &&
          project_id == o.project_id &&
          completed_at_start == o.completed_at_start &&
          updated_at_start == o.updated_at_start
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [archived, owner_id, story_type, epic_ids, project_ids, updated_at_end, completed_at_end, workflow_state_types, deadline_end, created_at_start, epic_id, label_name, requested_by_id, iteration_id, label_ids, group_id, workflow_state_id, iteration_ids, created_at_end, deadline_start, group_ids, owner_ids, external_id, includes_description, estimate, project_id, completed_at_start, updated_at_start].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
