=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # Stories are the standard unit of work in Shortcut and represent individual features, bugs, and chores.
  class Story
    # The Shortcut application url for the Story.
    attr_accessor :app_url

    # The description of the story.
    attr_accessor :description

    # True if the story has been archived or not.
    attr_accessor :archived

    # A true/false boolean indicating if the Story has been started.
    attr_accessor :started

    # An array of story links attached to the Story.
    attr_accessor :story_links

    # A string description of this resource.
    attr_accessor :entity_type

    # An array of labels attached to the story.
    attr_accessor :labels

    # Deprecated: use member_mention_ids.
    attr_accessor :mention_ids

    # An array of Member IDs that have been mentioned in the Story description.
    attr_accessor :member_mention_ids

    # The type of story (feature, bug, chore).
    attr_accessor :story_type

    # An array of linked files attached to the story.
    attr_accessor :linked_files

    # The ID of the workflow the story belongs to.
    attr_accessor :workflow_id

    # A manual override for the time/date the Story was completed.
    attr_accessor :completed_at_override

    # The time/date the Story was started.
    attr_accessor :started_at

    # The time/date the Story was completed.
    attr_accessor :completed_at

    # The name of the story.
    attr_accessor :name

    # A true/false boolean indicating if the Story has been completed.
    attr_accessor :completed

    # An array of comments attached to the story.
    attr_accessor :comments

    # A true/false boolean indicating if the Story is currently a blocker of another story.
    attr_accessor :blocker

    # An array of Git branches attached to the story.
    attr_accessor :branches

    # The ID of the epic the story belongs to.
    attr_accessor :epic_id

    # The ID of the story template used to create this story, or null if not created using a template.
    attr_accessor :story_template_id

    # An array of external links (strings) associated with a Story
    attr_accessor :external_links

    # The IDs of the iteration the story belongs to.
    attr_accessor :previous_iteration_ids

    # The ID of the Member that requested the story.
    attr_accessor :requested_by_id

    # The ID of the iteration the story belongs to.
    attr_accessor :iteration_id

    # An array of tasks connected to the story.
    attr_accessor :tasks

    # An array of label ids attached to the story.
    attr_accessor :label_ids

    # A manual override for the time/date the Story was started.
    attr_accessor :started_at_override

    # The ID of the group associated with the story.
    attr_accessor :group_id

    # The ID of the workflow state the story is currently in.
    attr_accessor :workflow_state_id

    # The time/date the Story was updated.
    attr_accessor :updated_at

    # An array of Pull/Merge Requests attached to the story.
    attr_accessor :pull_requests

    # An array of Group IDs that have been mentioned in the Story description.
    attr_accessor :group_mention_ids

    # An array of UUIDs for any Members listed as Followers.
    attr_accessor :follower_ids

    # An array of UUIDs of the owners of this story.
    attr_accessor :owner_ids

    # This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
    attr_accessor :external_id

    # The unique ID of the Story.
    attr_accessor :id

    # The lead time (in seconds) of this story when complete.
    attr_accessor :lead_time

    # The numeric point estimate of the story. Can also be null, which means unestimated.
    attr_accessor :estimate

    # An array of commits attached to the story.
    attr_accessor :commits

    # An array of files attached to the story.
    attr_accessor :files

    # A number representing the position of the story in relation to every other story in the current project.
    attr_accessor :position

    # A true/false boolean indicating if the Story is currently blocked.
    attr_accessor :blocked

    # The ID of the project the story belongs to.
    attr_accessor :project_id

    # The due date of the story.
    attr_accessor :deadline

    attr_accessor :stats

    # The cycle time (in seconds) of this story when complete.
    attr_accessor :cycle_time

    # The time/date the Story was created.
    attr_accessor :created_at

    # The time/date the Story was last changed workflow-state.
    attr_accessor :moved_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_url' => :'app_url',
        :'description' => :'description',
        :'archived' => :'archived',
        :'started' => :'started',
        :'story_links' => :'story_links',
        :'entity_type' => :'entity_type',
        :'labels' => :'labels',
        :'mention_ids' => :'mention_ids',
        :'member_mention_ids' => :'member_mention_ids',
        :'story_type' => :'story_type',
        :'linked_files' => :'linked_files',
        :'workflow_id' => :'workflow_id',
        :'completed_at_override' => :'completed_at_override',
        :'started_at' => :'started_at',
        :'completed_at' => :'completed_at',
        :'name' => :'name',
        :'completed' => :'completed',
        :'comments' => :'comments',
        :'blocker' => :'blocker',
        :'branches' => :'branches',
        :'epic_id' => :'epic_id',
        :'story_template_id' => :'story_template_id',
        :'external_links' => :'external_links',
        :'previous_iteration_ids' => :'previous_iteration_ids',
        :'requested_by_id' => :'requested_by_id',
        :'iteration_id' => :'iteration_id',
        :'tasks' => :'tasks',
        :'label_ids' => :'label_ids',
        :'started_at_override' => :'started_at_override',
        :'group_id' => :'group_id',
        :'workflow_state_id' => :'workflow_state_id',
        :'updated_at' => :'updated_at',
        :'pull_requests' => :'pull_requests',
        :'group_mention_ids' => :'group_mention_ids',
        :'follower_ids' => :'follower_ids',
        :'owner_ids' => :'owner_ids',
        :'external_id' => :'external_id',
        :'id' => :'id',
        :'lead_time' => :'lead_time',
        :'estimate' => :'estimate',
        :'commits' => :'commits',
        :'files' => :'files',
        :'position' => :'position',
        :'blocked' => :'blocked',
        :'project_id' => :'project_id',
        :'deadline' => :'deadline',
        :'stats' => :'stats',
        :'cycle_time' => :'cycle_time',
        :'created_at' => :'created_at',
        :'moved_at' => :'moved_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_url' => :'String',
        :'description' => :'String',
        :'archived' => :'Boolean',
        :'started' => :'Boolean',
        :'story_links' => :'Array<TypedStoryLink>',
        :'entity_type' => :'String',
        :'labels' => :'Array<LabelSlim>',
        :'mention_ids' => :'Array<String>',
        :'member_mention_ids' => :'Array<String>',
        :'story_type' => :'String',
        :'linked_files' => :'Array<LinkedFile>',
        :'workflow_id' => :'Integer',
        :'completed_at_override' => :'Time',
        :'started_at' => :'Time',
        :'completed_at' => :'Time',
        :'name' => :'String',
        :'completed' => :'Boolean',
        :'comments' => :'Array<StoryComment>',
        :'blocker' => :'Boolean',
        :'branches' => :'Array<Branch>',
        :'epic_id' => :'Integer',
        :'story_template_id' => :'String',
        :'external_links' => :'Array<String>',
        :'previous_iteration_ids' => :'Array<Integer>',
        :'requested_by_id' => :'String',
        :'iteration_id' => :'Integer',
        :'tasks' => :'Array<Task>',
        :'label_ids' => :'Array<Integer>',
        :'started_at_override' => :'Time',
        :'group_id' => :'String',
        :'workflow_state_id' => :'Integer',
        :'updated_at' => :'Time',
        :'pull_requests' => :'Array<PullRequest>',
        :'group_mention_ids' => :'Array<String>',
        :'follower_ids' => :'Array<String>',
        :'owner_ids' => :'Array<String>',
        :'external_id' => :'String',
        :'id' => :'Integer',
        :'lead_time' => :'Integer',
        :'estimate' => :'Integer',
        :'commits' => :'Array<Commit>',
        :'files' => :'Array<UploadedFile>',
        :'position' => :'Integer',
        :'blocked' => :'Boolean',
        :'project_id' => :'Integer',
        :'deadline' => :'Time',
        :'stats' => :'StoryStats',
        :'cycle_time' => :'Integer',
        :'created_at' => :'Time',
        :'moved_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'completed_at_override',
        :'started_at',
        :'completed_at',
        :'epic_id',
        :'story_template_id',
        :'iteration_id',
        :'started_at_override',
        :'group_id',
        :'updated_at',
        :'external_id',
        :'estimate',
        :'project_id',
        :'deadline',
        :'moved_at'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::Story` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::Story`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_url')
        self.app_url = attributes[:'app_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'started')
        self.started = attributes[:'started']
      end

      if attributes.key?(:'story_links')
        if (value = attributes[:'story_links']).is_a?(Array)
          self.story_links = value
        end
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'mention_ids')
        if (value = attributes[:'mention_ids']).is_a?(Array)
          self.mention_ids = value
        end
      end

      if attributes.key?(:'member_mention_ids')
        if (value = attributes[:'member_mention_ids']).is_a?(Array)
          self.member_mention_ids = value
        end
      end

      if attributes.key?(:'story_type')
        self.story_type = attributes[:'story_type']
      end

      if attributes.key?(:'linked_files')
        if (value = attributes[:'linked_files']).is_a?(Array)
          self.linked_files = value
        end
      end

      if attributes.key?(:'workflow_id')
        self.workflow_id = attributes[:'workflow_id']
      end

      if attributes.key?(:'completed_at_override')
        self.completed_at_override = attributes[:'completed_at_override']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'completed_at')
        self.completed_at = attributes[:'completed_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.key?(:'comments')
        if (value = attributes[:'comments']).is_a?(Array)
          self.comments = value
        end
      end

      if attributes.key?(:'blocker')
        self.blocker = attributes[:'blocker']
      end

      if attributes.key?(:'branches')
        if (value = attributes[:'branches']).is_a?(Array)
          self.branches = value
        end
      end

      if attributes.key?(:'epic_id')
        self.epic_id = attributes[:'epic_id']
      end

      if attributes.key?(:'story_template_id')
        self.story_template_id = attributes[:'story_template_id']
      end

      if attributes.key?(:'external_links')
        if (value = attributes[:'external_links']).is_a?(Array)
          self.external_links = value
        end
      end

      if attributes.key?(:'previous_iteration_ids')
        if (value = attributes[:'previous_iteration_ids']).is_a?(Array)
          self.previous_iteration_ids = value
        end
      end

      if attributes.key?(:'requested_by_id')
        self.requested_by_id = attributes[:'requested_by_id']
      end

      if attributes.key?(:'iteration_id')
        self.iteration_id = attributes[:'iteration_id']
      end

      if attributes.key?(:'tasks')
        if (value = attributes[:'tasks']).is_a?(Array)
          self.tasks = value
        end
      end

      if attributes.key?(:'label_ids')
        if (value = attributes[:'label_ids']).is_a?(Array)
          self.label_ids = value
        end
      end

      if attributes.key?(:'started_at_override')
        self.started_at_override = attributes[:'started_at_override']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'workflow_state_id')
        self.workflow_state_id = attributes[:'workflow_state_id']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'pull_requests')
        if (value = attributes[:'pull_requests']).is_a?(Array)
          self.pull_requests = value
        end
      end

      if attributes.key?(:'group_mention_ids')
        if (value = attributes[:'group_mention_ids']).is_a?(Array)
          self.group_mention_ids = value
        end
      end

      if attributes.key?(:'follower_ids')
        if (value = attributes[:'follower_ids']).is_a?(Array)
          self.follower_ids = value
        end
      end

      if attributes.key?(:'owner_ids')
        if (value = attributes[:'owner_ids']).is_a?(Array)
          self.owner_ids = value
        end
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'lead_time')
        self.lead_time = attributes[:'lead_time']
      end

      if attributes.key?(:'estimate')
        self.estimate = attributes[:'estimate']
      end

      if attributes.key?(:'commits')
        if (value = attributes[:'commits']).is_a?(Array)
          self.commits = value
        end
      end

      if attributes.key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'blocked')
        self.blocked = attributes[:'blocked']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'deadline')
        self.deadline = attributes[:'deadline']
      end

      if attributes.key?(:'stats')
        self.stats = attributes[:'stats']
      end

      if attributes.key?(:'cycle_time')
        self.cycle_time = attributes[:'cycle_time']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'moved_at')
        self.moved_at = attributes[:'moved_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @app_url.nil?
        invalid_properties.push('invalid value for "app_url", app_url cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @started.nil?
        invalid_properties.push('invalid value for "started", started cannot be nil.')
      end

      if @story_links.nil?
        invalid_properties.push('invalid value for "story_links", story_links cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @labels.nil?
        invalid_properties.push('invalid value for "labels", labels cannot be nil.')
      end

      if @mention_ids.nil?
        invalid_properties.push('invalid value for "mention_ids", mention_ids cannot be nil.')
      end

      if @member_mention_ids.nil?
        invalid_properties.push('invalid value for "member_mention_ids", member_mention_ids cannot be nil.')
      end

      if @story_type.nil?
        invalid_properties.push('invalid value for "story_type", story_type cannot be nil.')
      end

      if @linked_files.nil?
        invalid_properties.push('invalid value for "linked_files", linked_files cannot be nil.')
      end

      if @workflow_id.nil?
        invalid_properties.push('invalid value for "workflow_id", workflow_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @completed.nil?
        invalid_properties.push('invalid value for "completed", completed cannot be nil.')
      end

      if @comments.nil?
        invalid_properties.push('invalid value for "comments", comments cannot be nil.')
      end

      if @blocker.nil?
        invalid_properties.push('invalid value for "blocker", blocker cannot be nil.')
      end

      if @branches.nil?
        invalid_properties.push('invalid value for "branches", branches cannot be nil.')
      end

      if @external_links.nil?
        invalid_properties.push('invalid value for "external_links", external_links cannot be nil.')
      end

      if @previous_iteration_ids.nil?
        invalid_properties.push('invalid value for "previous_iteration_ids", previous_iteration_ids cannot be nil.')
      end

      if @requested_by_id.nil?
        invalid_properties.push('invalid value for "requested_by_id", requested_by_id cannot be nil.')
      end

      if @tasks.nil?
        invalid_properties.push('invalid value for "tasks", tasks cannot be nil.')
      end

      if @label_ids.nil?
        invalid_properties.push('invalid value for "label_ids", label_ids cannot be nil.')
      end

      if @workflow_state_id.nil?
        invalid_properties.push('invalid value for "workflow_state_id", workflow_state_id cannot be nil.')
      end

      if @pull_requests.nil?
        invalid_properties.push('invalid value for "pull_requests", pull_requests cannot be nil.')
      end

      if @group_mention_ids.nil?
        invalid_properties.push('invalid value for "group_mention_ids", group_mention_ids cannot be nil.')
      end

      if @follower_ids.nil?
        invalid_properties.push('invalid value for "follower_ids", follower_ids cannot be nil.')
      end

      if @owner_ids.nil?
        invalid_properties.push('invalid value for "owner_ids", owner_ids cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @commits.nil?
        invalid_properties.push('invalid value for "commits", commits cannot be nil.')
      end

      if @files.nil?
        invalid_properties.push('invalid value for "files", files cannot be nil.')
      end

      if @position.nil?
        invalid_properties.push('invalid value for "position", position cannot be nil.')
      end

      if @blocked.nil?
        invalid_properties.push('invalid value for "blocked", blocked cannot be nil.')
      end

      if @stats.nil?
        invalid_properties.push('invalid value for "stats", stats cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @app_url.nil?
      return false if @description.nil?
      return false if @archived.nil?
      return false if @started.nil?
      return false if @story_links.nil?
      return false if @entity_type.nil?
      return false if @labels.nil?
      return false if @mention_ids.nil?
      return false if @member_mention_ids.nil?
      return false if @story_type.nil?
      return false if @linked_files.nil?
      return false if @workflow_id.nil?
      return false if @name.nil?
      return false if @completed.nil?
      return false if @comments.nil?
      return false if @blocker.nil?
      return false if @branches.nil?
      return false if @external_links.nil?
      return false if @previous_iteration_ids.nil?
      return false if @requested_by_id.nil?
      return false if @tasks.nil?
      return false if @label_ids.nil?
      return false if @workflow_state_id.nil?
      return false if @pull_requests.nil?
      return false if @group_mention_ids.nil?
      return false if @follower_ids.nil?
      return false if @owner_ids.nil?
      return false if @id.nil?
      return false if @commits.nil?
      return false if @files.nil?
      return false if @position.nil?
      return false if @blocked.nil?
      return false if @stats.nil?
      return false if @created_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_url == o.app_url &&
          description == o.description &&
          archived == o.archived &&
          started == o.started &&
          story_links == o.story_links &&
          entity_type == o.entity_type &&
          labels == o.labels &&
          mention_ids == o.mention_ids &&
          member_mention_ids == o.member_mention_ids &&
          story_type == o.story_type &&
          linked_files == o.linked_files &&
          workflow_id == o.workflow_id &&
          completed_at_override == o.completed_at_override &&
          started_at == o.started_at &&
          completed_at == o.completed_at &&
          name == o.name &&
          completed == o.completed &&
          comments == o.comments &&
          blocker == o.blocker &&
          branches == o.branches &&
          epic_id == o.epic_id &&
          story_template_id == o.story_template_id &&
          external_links == o.external_links &&
          previous_iteration_ids == o.previous_iteration_ids &&
          requested_by_id == o.requested_by_id &&
          iteration_id == o.iteration_id &&
          tasks == o.tasks &&
          label_ids == o.label_ids &&
          started_at_override == o.started_at_override &&
          group_id == o.group_id &&
          workflow_state_id == o.workflow_state_id &&
          updated_at == o.updated_at &&
          pull_requests == o.pull_requests &&
          group_mention_ids == o.group_mention_ids &&
          follower_ids == o.follower_ids &&
          owner_ids == o.owner_ids &&
          external_id == o.external_id &&
          id == o.id &&
          lead_time == o.lead_time &&
          estimate == o.estimate &&
          commits == o.commits &&
          files == o.files &&
          position == o.position &&
          blocked == o.blocked &&
          project_id == o.project_id &&
          deadline == o.deadline &&
          stats == o.stats &&
          cycle_time == o.cycle_time &&
          created_at == o.created_at &&
          moved_at == o.moved_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_url, description, archived, started, story_links, entity_type, labels, mention_ids, member_mention_ids, story_type, linked_files, workflow_id, completed_at_override, started_at, completed_at, name, completed, comments, blocker, branches, epic_id, story_template_id, external_links, previous_iteration_ids, requested_by_id, iteration_id, tasks, label_ids, started_at_override, group_id, workflow_state_id, updated_at, pull_requests, group_mention_ids, follower_ids, owner_ids, external_id, id, lead_time, estimate, commits, files, position, blocked, project_id, deadline, stats, cycle_time, created_at, moved_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
