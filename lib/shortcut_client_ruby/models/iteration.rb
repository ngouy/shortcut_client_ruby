=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # An Iteration is a defined, time-boxed period of development for a collection of Stories. See https://help.shortcut.com/hc/en-us/articles/360028953452-Iterations-Overview for more information.
  class Iteration
    # The Shortcut application url for the Iteration.
    attr_accessor :app_url

    # The description of the iteration.
    attr_accessor :description

    # A string description of this resource
    attr_accessor :entity_type

    # An array of labels attached to the iteration.
    attr_accessor :labels

    # Deprecated: use member_mention_ids.
    attr_accessor :mention_ids

    # An array of Member IDs that have been mentioned in the Story description.
    attr_accessor :member_mention_ids

    # The name of the iteration.
    attr_accessor :name

    # An array of label ids attached to the iteration.
    attr_accessor :label_ids

    # The instant when this iteration was last updated.
    attr_accessor :updated_at

    # An array of Group IDs that have been mentioned in the Story description.
    attr_accessor :group_mention_ids

    # The date this iteration begins.
    attr_accessor :end_date

    # An array of UUIDs for any Members listed as Followers.
    attr_accessor :follower_ids

    # An array of UUIDs for any Groups you want to add as Followers. Currently, only one Group association is presented in our web UI.
    attr_accessor :group_ids

    # The date this iteration begins.
    attr_accessor :start_date

    # The status of the iteration. Values are either \"unstarted\", \"started\", or \"done\".
    attr_accessor :status

    # The ID of the iteration.
    attr_accessor :id

    attr_accessor :stats

    # The instant when this iteration was created.
    attr_accessor :created_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_url' => :'app_url',
        :'description' => :'description',
        :'entity_type' => :'entity_type',
        :'labels' => :'labels',
        :'mention_ids' => :'mention_ids',
        :'member_mention_ids' => :'member_mention_ids',
        :'name' => :'name',
        :'label_ids' => :'label_ids',
        :'updated_at' => :'updated_at',
        :'group_mention_ids' => :'group_mention_ids',
        :'end_date' => :'end_date',
        :'follower_ids' => :'follower_ids',
        :'group_ids' => :'group_ids',
        :'start_date' => :'start_date',
        :'status' => :'status',
        :'id' => :'id',
        :'stats' => :'stats',
        :'created_at' => :'created_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_url' => :'String',
        :'description' => :'String',
        :'entity_type' => :'String',
        :'labels' => :'Array<Label>',
        :'mention_ids' => :'Array<String>',
        :'member_mention_ids' => :'Array<String>',
        :'name' => :'String',
        :'label_ids' => :'Array<Integer>',
        :'updated_at' => :'Time',
        :'group_mention_ids' => :'Array<String>',
        :'end_date' => :'Time',
        :'follower_ids' => :'Array<String>',
        :'group_ids' => :'Array<String>',
        :'start_date' => :'Time',
        :'status' => :'String',
        :'id' => :'Integer',
        :'stats' => :'IterationStats',
        :'created_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::Iteration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::Iteration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_url')
        self.app_url = attributes[:'app_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'mention_ids')
        if (value = attributes[:'mention_ids']).is_a?(Array)
          self.mention_ids = value
        end
      end

      if attributes.key?(:'member_mention_ids')
        if (value = attributes[:'member_mention_ids']).is_a?(Array)
          self.member_mention_ids = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'label_ids')
        if (value = attributes[:'label_ids']).is_a?(Array)
          self.label_ids = value
        end
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'group_mention_ids')
        if (value = attributes[:'group_mention_ids']).is_a?(Array)
          self.group_mention_ids = value
        end
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'follower_ids')
        if (value = attributes[:'follower_ids']).is_a?(Array)
          self.follower_ids = value
        end
      end

      if attributes.key?(:'group_ids')
        if (value = attributes[:'group_ids']).is_a?(Array)
          self.group_ids = value
        end
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'stats')
        self.stats = attributes[:'stats']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @app_url.nil?
        invalid_properties.push('invalid value for "app_url", app_url cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @labels.nil?
        invalid_properties.push('invalid value for "labels", labels cannot be nil.')
      end

      if @mention_ids.nil?
        invalid_properties.push('invalid value for "mention_ids", mention_ids cannot be nil.')
      end

      if @member_mention_ids.nil?
        invalid_properties.push('invalid value for "member_mention_ids", member_mention_ids cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @label_ids.nil?
        invalid_properties.push('invalid value for "label_ids", label_ids cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @group_mention_ids.nil?
        invalid_properties.push('invalid value for "group_mention_ids", group_mention_ids cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if @follower_ids.nil?
        invalid_properties.push('invalid value for "follower_ids", follower_ids cannot be nil.')
      end

      if @group_ids.nil?
        invalid_properties.push('invalid value for "group_ids", group_ids cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @stats.nil?
        invalid_properties.push('invalid value for "stats", stats cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @app_url.nil?
      return false if @description.nil?
      return false if @entity_type.nil?
      return false if @labels.nil?
      return false if @mention_ids.nil?
      return false if @member_mention_ids.nil?
      return false if @name.nil?
      return false if @label_ids.nil?
      return false if @updated_at.nil?
      return false if @group_mention_ids.nil?
      return false if @end_date.nil?
      return false if @follower_ids.nil?
      return false if @group_ids.nil?
      return false if @start_date.nil?
      return false if @status.nil?
      return false if @id.nil?
      return false if @stats.nil?
      return false if @created_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_url == o.app_url &&
          description == o.description &&
          entity_type == o.entity_type &&
          labels == o.labels &&
          mention_ids == o.mention_ids &&
          member_mention_ids == o.member_mention_ids &&
          name == o.name &&
          label_ids == o.label_ids &&
          updated_at == o.updated_at &&
          group_mention_ids == o.group_mention_ids &&
          end_date == o.end_date &&
          follower_ids == o.follower_ids &&
          group_ids == o.group_ids &&
          start_date == o.start_date &&
          status == o.status &&
          id == o.id &&
          stats == o.stats &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_url, description, entity_type, labels, mention_ids, member_mention_ids, name, label_ids, updated_at, group_mention_ids, end_date, follower_ids, group_ids, start_date, status, id, stats, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
