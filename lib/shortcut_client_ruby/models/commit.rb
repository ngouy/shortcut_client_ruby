=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # Commit refers to a VCS commit and all associated details.
  class Commit
    # A string description of this resource.
    attr_accessor :entity_type

    # The ID of the Member that authored the Commit, if known.
    attr_accessor :author_id

    # The Commit hash.
    attr_accessor :hash

    # The time/date the Commit was updated.
    attr_accessor :updated_at

    # The IDs of the Branches the Commit has been merged into.
    attr_accessor :merged_branch_ids

    # The unique ID of the Commit.
    attr_accessor :id

    # The URL of the Commit.
    attr_accessor :url

    # The email address of the VCS user that authored the Commit.
    attr_accessor :author_email

    # The time/date the Commit was pushed.
    attr_accessor :timestamp

    attr_accessor :author_identity

    # The ID of the Repository that contains the Commit.
    attr_accessor :repository_id

    # The time/date the Commit was created.
    attr_accessor :created_at

    # The Commit message.
    attr_accessor :message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'entity_type' => :'entity_type',
        :'author_id' => :'author_id',
        :'hash' => :'hash',
        :'updated_at' => :'updated_at',
        :'merged_branch_ids' => :'merged_branch_ids',
        :'id' => :'id',
        :'url' => :'url',
        :'author_email' => :'author_email',
        :'timestamp' => :'timestamp',
        :'author_identity' => :'author_identity',
        :'repository_id' => :'repository_id',
        :'created_at' => :'created_at',
        :'message' => :'message'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'entity_type' => :'String',
        :'author_id' => :'String',
        :'hash' => :'String',
        :'updated_at' => :'Time',
        :'merged_branch_ids' => :'Array<Integer>',
        :'id' => :'Integer',
        :'url' => :'String',
        :'author_email' => :'String',
        :'timestamp' => :'Time',
        :'author_identity' => :'Identity',
        :'repository_id' => :'Integer',
        :'created_at' => :'Time',
        :'message' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'author_id',
        :'updated_at',
        :'id',
        :'repository_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::Commit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::Commit`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'author_id')
        self.author_id = attributes[:'author_id']
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'merged_branch_ids')
        if (value = attributes[:'merged_branch_ids']).is_a?(Array)
          self.merged_branch_ids = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'author_email')
        self.author_email = attributes[:'author_email']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'author_identity')
        self.author_identity = attributes[:'author_identity']
      end

      if attributes.key?(:'repository_id')
        self.repository_id = attributes[:'repository_id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @hash.nil?
        invalid_properties.push('invalid value for "hash", hash cannot be nil.')
      end

      if @merged_branch_ids.nil?
        invalid_properties.push('invalid value for "merged_branch_ids", merged_branch_ids cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @author_email.nil?
        invalid_properties.push('invalid value for "author_email", author_email cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      if @author_identity.nil?
        invalid_properties.push('invalid value for "author_identity", author_identity cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @message.nil?
        invalid_properties.push('invalid value for "message", message cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @entity_type.nil?
      return false if @hash.nil?
      return false if @merged_branch_ids.nil?
      return false if @url.nil?
      return false if @author_email.nil?
      return false if @timestamp.nil?
      return false if @author_identity.nil?
      return false if @created_at.nil?
      return false if @message.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          entity_type == o.entity_type &&
          author_id == o.author_id &&
          hash == o.hash &&
          updated_at == o.updated_at &&
          merged_branch_ids == o.merged_branch_ids &&
          id == o.id &&
          url == o.url &&
          author_email == o.author_email &&
          timestamp == o.timestamp &&
          author_identity == o.author_identity &&
          repository_id == o.repository_id &&
          created_at == o.created_at &&
          message == o.message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [entity_type, author_id, hash, updated_at, merged_branch_ids, id, url, author_email, timestamp, author_identity, repository_id, created_at, message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
