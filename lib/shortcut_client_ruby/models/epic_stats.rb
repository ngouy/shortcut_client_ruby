=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # A group of calculated values for this Epic.
  class EpicStats
    # The total number of completed points in this Epic.
    attr_accessor :num_points_done

    # The total number of documents associated with this Epic.
    attr_accessor :num_related_documents

    # The average cycle time (in seconds) of completed stories in this Epic.
    attr_accessor :average_cycle_time

    # The total number of unstarted Stories in this Epic.
    attr_accessor :num_stories_unstarted

    # The total number of Stories in this Epic.
    attr_accessor :num_stories_total

    # The date of the last update of a Story in this Epic.
    attr_accessor :last_story_update

    # The total number of started points in this Epic.
    attr_accessor :num_points_started

    # The total number of unstarted points in this Epic.
    attr_accessor :num_points_unstarted

    # The total number of started Stories in this Epic.
    attr_accessor :num_stories_started

    # The total number of Stories with no point estimate.
    attr_accessor :num_stories_unestimated

    # The average lead time (in seconds) of completed stories in this Epic.
    attr_accessor :average_lead_time

    # The total number of points in this Epic.
    attr_accessor :num_points

    # The total number of done Stories in this Epic.
    attr_accessor :num_stories_done

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_points_done' => :'num_points_done',
        :'num_related_documents' => :'num_related_documents',
        :'average_cycle_time' => :'average_cycle_time',
        :'num_stories_unstarted' => :'num_stories_unstarted',
        :'num_stories_total' => :'num_stories_total',
        :'last_story_update' => :'last_story_update',
        :'num_points_started' => :'num_points_started',
        :'num_points_unstarted' => :'num_points_unstarted',
        :'num_stories_started' => :'num_stories_started',
        :'num_stories_unestimated' => :'num_stories_unestimated',
        :'average_lead_time' => :'average_lead_time',
        :'num_points' => :'num_points',
        :'num_stories_done' => :'num_stories_done'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'num_points_done' => :'Integer',
        :'num_related_documents' => :'Integer',
        :'average_cycle_time' => :'Integer',
        :'num_stories_unstarted' => :'Integer',
        :'num_stories_total' => :'Integer',
        :'last_story_update' => :'Time',
        :'num_points_started' => :'Integer',
        :'num_points_unstarted' => :'Integer',
        :'num_stories_started' => :'Integer',
        :'num_stories_unestimated' => :'Integer',
        :'average_lead_time' => :'Integer',
        :'num_points' => :'Integer',
        :'num_stories_done' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'last_story_update',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::EpicStats` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::EpicStats`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'num_points_done')
        self.num_points_done = attributes[:'num_points_done']
      end

      if attributes.key?(:'num_related_documents')
        self.num_related_documents = attributes[:'num_related_documents']
      end

      if attributes.key?(:'average_cycle_time')
        self.average_cycle_time = attributes[:'average_cycle_time']
      end

      if attributes.key?(:'num_stories_unstarted')
        self.num_stories_unstarted = attributes[:'num_stories_unstarted']
      end

      if attributes.key?(:'num_stories_total')
        self.num_stories_total = attributes[:'num_stories_total']
      end

      if attributes.key?(:'last_story_update')
        self.last_story_update = attributes[:'last_story_update']
      end

      if attributes.key?(:'num_points_started')
        self.num_points_started = attributes[:'num_points_started']
      end

      if attributes.key?(:'num_points_unstarted')
        self.num_points_unstarted = attributes[:'num_points_unstarted']
      end

      if attributes.key?(:'num_stories_started')
        self.num_stories_started = attributes[:'num_stories_started']
      end

      if attributes.key?(:'num_stories_unestimated')
        self.num_stories_unestimated = attributes[:'num_stories_unestimated']
      end

      if attributes.key?(:'average_lead_time')
        self.average_lead_time = attributes[:'average_lead_time']
      end

      if attributes.key?(:'num_points')
        self.num_points = attributes[:'num_points']
      end

      if attributes.key?(:'num_stories_done')
        self.num_stories_done = attributes[:'num_stories_done']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @num_points_done.nil?
        invalid_properties.push('invalid value for "num_points_done", num_points_done cannot be nil.')
      end

      if @num_related_documents.nil?
        invalid_properties.push('invalid value for "num_related_documents", num_related_documents cannot be nil.')
      end

      if @num_stories_unstarted.nil?
        invalid_properties.push('invalid value for "num_stories_unstarted", num_stories_unstarted cannot be nil.')
      end

      if @num_stories_total.nil?
        invalid_properties.push('invalid value for "num_stories_total", num_stories_total cannot be nil.')
      end

      if @num_points_started.nil?
        invalid_properties.push('invalid value for "num_points_started", num_points_started cannot be nil.')
      end

      if @num_points_unstarted.nil?
        invalid_properties.push('invalid value for "num_points_unstarted", num_points_unstarted cannot be nil.')
      end

      if @num_stories_started.nil?
        invalid_properties.push('invalid value for "num_stories_started", num_stories_started cannot be nil.')
      end

      if @num_stories_unestimated.nil?
        invalid_properties.push('invalid value for "num_stories_unestimated", num_stories_unestimated cannot be nil.')
      end

      if @num_points.nil?
        invalid_properties.push('invalid value for "num_points", num_points cannot be nil.')
      end

      if @num_stories_done.nil?
        invalid_properties.push('invalid value for "num_stories_done", num_stories_done cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @num_points_done.nil?
      return false if @num_related_documents.nil?
      return false if @num_stories_unstarted.nil?
      return false if @num_stories_total.nil?
      return false if @num_points_started.nil?
      return false if @num_points_unstarted.nil?
      return false if @num_stories_started.nil?
      return false if @num_stories_unestimated.nil?
      return false if @num_points.nil?
      return false if @num_stories_done.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_points_done == o.num_points_done &&
          num_related_documents == o.num_related_documents &&
          average_cycle_time == o.average_cycle_time &&
          num_stories_unstarted == o.num_stories_unstarted &&
          num_stories_total == o.num_stories_total &&
          last_story_update == o.last_story_update &&
          num_points_started == o.num_points_started &&
          num_points_unstarted == o.num_points_unstarted &&
          num_stories_started == o.num_stories_started &&
          num_stories_unestimated == o.num_stories_unestimated &&
          average_lead_time == o.average_lead_time &&
          num_points == o.num_points &&
          num_stories_done == o.num_stories_done
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [num_points_done, num_related_documents, average_cycle_time, num_stories_unstarted, num_stories_total, last_story_update, num_points_started, num_points_unstarted, num_stories_started, num_stories_unestimated, average_lead_time, num_points, num_stories_done].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
