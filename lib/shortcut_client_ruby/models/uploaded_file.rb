=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # An UploadedFile is any document uploaded to your Shortcut Workspace. Files attached from a third-party service are different: see the Linked Files endpoint.
  class UploadedFile
    # The description of the file.
    attr_accessor :description

    # A string description of this resource.
    attr_accessor :entity_type

    # The unique IDs of the Stories associated with this file.
    attr_accessor :story_ids

    # Deprecated: use member_mention_ids.
    attr_accessor :mention_ids

    # The unique IDs of the Members who are mentioned in the file description.
    attr_accessor :member_mention_ids

    # The optional User-specified name of the file.
    attr_accessor :name

    # The url where the thumbnail of the file can be found in Shortcut.
    attr_accessor :thumbnail_url

    # The size of the file.
    attr_accessor :size

    # The unique ID of the Member who uploaded the file.
    attr_accessor :uploader_id

    # Free form string corresponding to a text or image file.
    attr_accessor :content_type

    # The time/date that the file was updated.
    attr_accessor :updated_at

    # The name assigned to the file in Shortcut upon upload.
    attr_accessor :filename

    # The unique IDs of the Groups who are mentioned in the file description.
    attr_accessor :group_mention_ids

    # This field can be set to another unique ID. In the case that the File has been imported from another tool, the ID in the other tool can be indicated here.
    attr_accessor :external_id

    # The unique ID for the file.
    attr_accessor :id

    # The URL for the file.
    attr_accessor :url

    # The time/date that the file was created.
    attr_accessor :created_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'description',
        :'entity_type' => :'entity_type',
        :'story_ids' => :'story_ids',
        :'mention_ids' => :'mention_ids',
        :'member_mention_ids' => :'member_mention_ids',
        :'name' => :'name',
        :'thumbnail_url' => :'thumbnail_url',
        :'size' => :'size',
        :'uploader_id' => :'uploader_id',
        :'content_type' => :'content_type',
        :'updated_at' => :'updated_at',
        :'filename' => :'filename',
        :'group_mention_ids' => :'group_mention_ids',
        :'external_id' => :'external_id',
        :'id' => :'id',
        :'url' => :'url',
        :'created_at' => :'created_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'description' => :'String',
        :'entity_type' => :'String',
        :'story_ids' => :'Array<Integer>',
        :'mention_ids' => :'Array<String>',
        :'member_mention_ids' => :'Array<String>',
        :'name' => :'String',
        :'thumbnail_url' => :'String',
        :'size' => :'Integer',
        :'uploader_id' => :'String',
        :'content_type' => :'String',
        :'updated_at' => :'Time',
        :'filename' => :'String',
        :'group_mention_ids' => :'Array<String>',
        :'external_id' => :'String',
        :'id' => :'Integer',
        :'url' => :'String',
        :'created_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'thumbnail_url',
        :'updated_at',
        :'external_id',
        :'url',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::UploadedFile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::UploadedFile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'story_ids')
        if (value = attributes[:'story_ids']).is_a?(Array)
          self.story_ids = value
        end
      end

      if attributes.key?(:'mention_ids')
        if (value = attributes[:'mention_ids']).is_a?(Array)
          self.mention_ids = value
        end
      end

      if attributes.key?(:'member_mention_ids')
        if (value = attributes[:'member_mention_ids']).is_a?(Array)
          self.member_mention_ids = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'thumbnail_url')
        self.thumbnail_url = attributes[:'thumbnail_url']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'uploader_id')
        self.uploader_id = attributes[:'uploader_id']
      end

      if attributes.key?(:'content_type')
        self.content_type = attributes[:'content_type']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.key?(:'group_mention_ids')
        if (value = attributes[:'group_mention_ids']).is_a?(Array)
          self.group_mention_ids = value
        end
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @story_ids.nil?
        invalid_properties.push('invalid value for "story_ids", story_ids cannot be nil.')
      end

      if @mention_ids.nil?
        invalid_properties.push('invalid value for "mention_ids", mention_ids cannot be nil.')
      end

      if @member_mention_ids.nil?
        invalid_properties.push('invalid value for "member_mention_ids", member_mention_ids cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @size.nil?
        invalid_properties.push('invalid value for "size", size cannot be nil.')
      end

      if @uploader_id.nil?
        invalid_properties.push('invalid value for "uploader_id", uploader_id cannot be nil.')
      end

      if @content_type.nil?
        invalid_properties.push('invalid value for "content_type", content_type cannot be nil.')
      end

      if @filename.nil?
        invalid_properties.push('invalid value for "filename", filename cannot be nil.')
      end

      if @group_mention_ids.nil?
        invalid_properties.push('invalid value for "group_mention_ids", group_mention_ids cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @entity_type.nil?
      return false if @story_ids.nil?
      return false if @mention_ids.nil?
      return false if @member_mention_ids.nil?
      return false if @name.nil?
      return false if @size.nil?
      return false if @uploader_id.nil?
      return false if @content_type.nil?
      return false if @filename.nil?
      return false if @group_mention_ids.nil?
      return false if @id.nil?
      return false if @created_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          entity_type == o.entity_type &&
          story_ids == o.story_ids &&
          mention_ids == o.mention_ids &&
          member_mention_ids == o.member_mention_ids &&
          name == o.name &&
          thumbnail_url == o.thumbnail_url &&
          size == o.size &&
          uploader_id == o.uploader_id &&
          content_type == o.content_type &&
          updated_at == o.updated_at &&
          filename == o.filename &&
          group_mention_ids == o.group_mention_ids &&
          external_id == o.external_id &&
          id == o.id &&
          url == o.url &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, entity_type, story_ids, mention_ids, member_mention_ids, name, thumbnail_url, size, uploader_id, content_type, updated_at, filename, group_mention_ids, external_id, id, url, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
