=begin
#Shortcut API

#Shortcut API

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.35
=end

require 'date'

module Shortcut
  # Corresponds to a VCS Pull Request attached to a Shortcut story.
  class PullRequest
    # A string description of this resource.
    attr_accessor :entity_type

    # True/False boolean indicating whether the VCS pull request has been closed.
    attr_accessor :closed

    # True/False boolean indicating whether the VCS pull request has been merged.
    attr_accessor :merged

    # Number of lines added in the pull request, according to VCS.
    attr_accessor :num_added

    # The ID of the branch for the particular pull request.
    attr_accessor :branch_id

    # The pull request's unique number ID in VCS.
    attr_accessor :number

    # The name of the branch for the particular pull request.
    attr_accessor :branch_name

    # The name of the target branch for the particular pull request.
    attr_accessor :target_branch_name

    # The number of commits on the pull request.
    attr_accessor :num_commits

    # The title of the pull request.
    attr_accessor :title

    # The time/date the pull request was created.
    attr_accessor :updated_at

    # True/False boolean indicating whether the VCS pull request is in the draft state.
    attr_accessor :draft

    # The unique ID associated with the pull request in Shortcut.
    attr_accessor :id

    # An array of PullRequestLabels attached to the PullRequest.
    attr_accessor :vcs_labels

    # The URL for the pull request.
    attr_accessor :url

    # Number of lines removed in the pull request, according to VCS.
    attr_accessor :num_removed

    # The status of the review for the pull request.
    attr_accessor :review_status

    # Number of lines modified in the pull request, according to VCS.
    attr_accessor :num_modified

    # The status of the Continuous Integration workflow for the pull request.
    attr_accessor :build_status

    # The ID of the target branch for the particular pull request.
    attr_accessor :target_branch_id

    # The ID of the repository for the particular pull request.
    attr_accessor :repository_id

    # The time/date the pull request was created.
    attr_accessor :created_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'entity_type' => :'entity_type',
        :'closed' => :'closed',
        :'merged' => :'merged',
        :'num_added' => :'num_added',
        :'branch_id' => :'branch_id',
        :'number' => :'number',
        :'branch_name' => :'branch_name',
        :'target_branch_name' => :'target_branch_name',
        :'num_commits' => :'num_commits',
        :'title' => :'title',
        :'updated_at' => :'updated_at',
        :'draft' => :'draft',
        :'id' => :'id',
        :'vcs_labels' => :'vcs_labels',
        :'url' => :'url',
        :'num_removed' => :'num_removed',
        :'review_status' => :'review_status',
        :'num_modified' => :'num_modified',
        :'build_status' => :'build_status',
        :'target_branch_id' => :'target_branch_id',
        :'repository_id' => :'repository_id',
        :'created_at' => :'created_at'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'entity_type' => :'Object',
        :'closed' => :'Object',
        :'merged' => :'Object',
        :'num_added' => :'Object',
        :'branch_id' => :'Object',
        :'number' => :'Object',
        :'branch_name' => :'Object',
        :'target_branch_name' => :'Object',
        :'num_commits' => :'Object',
        :'title' => :'Object',
        :'updated_at' => :'Object',
        :'draft' => :'Object',
        :'id' => :'Object',
        :'vcs_labels' => :'Object',
        :'url' => :'Object',
        :'num_removed' => :'Object',
        :'review_status' => :'Object',
        :'num_modified' => :'Object',
        :'build_status' => :'Object',
        :'target_branch_id' => :'Object',
        :'repository_id' => :'Object',
        :'created_at' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'num_commits',
        :'vcs_labels',
        :'num_modified',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::PullRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::PullRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'closed')
        self.closed = attributes[:'closed']
      end

      if attributes.key?(:'merged')
        self.merged = attributes[:'merged']
      end

      if attributes.key?(:'num_added')
        self.num_added = attributes[:'num_added']
      end

      if attributes.key?(:'branch_id')
        self.branch_id = attributes[:'branch_id']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'branch_name')
        self.branch_name = attributes[:'branch_name']
      end

      if attributes.key?(:'target_branch_name')
        self.target_branch_name = attributes[:'target_branch_name']
      end

      if attributes.key?(:'num_commits')
        self.num_commits = attributes[:'num_commits']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'draft')
        self.draft = attributes[:'draft']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'vcs_labels')
        if (value = attributes[:'vcs_labels']).is_a?(Array)
          self.vcs_labels = value
        end
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'num_removed')
        self.num_removed = attributes[:'num_removed']
      end

      if attributes.key?(:'review_status')
        self.review_status = attributes[:'review_status']
      end

      if attributes.key?(:'num_modified')
        self.num_modified = attributes[:'num_modified']
      end

      if attributes.key?(:'build_status')
        self.build_status = attributes[:'build_status']
      end

      if attributes.key?(:'target_branch_id')
        self.target_branch_id = attributes[:'target_branch_id']
      end

      if attributes.key?(:'repository_id')
        self.repository_id = attributes[:'repository_id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @closed.nil?
        invalid_properties.push('invalid value for "closed", closed cannot be nil.')
      end

      if @merged.nil?
        invalid_properties.push('invalid value for "merged", merged cannot be nil.')
      end

      if @num_added.nil?
        invalid_properties.push('invalid value for "num_added", num_added cannot be nil.')
      end

      if @branch_id.nil?
        invalid_properties.push('invalid value for "branch_id", branch_id cannot be nil.')
      end

      if @number.nil?
        invalid_properties.push('invalid value for "number", number cannot be nil.')
      end

      if @branch_name.nil?
        invalid_properties.push('invalid value for "branch_name", branch_name cannot be nil.')
      end

      if @target_branch_name.nil?
        invalid_properties.push('invalid value for "target_branch_name", target_branch_name cannot be nil.')
      end

      if @num_commits.nil?
        invalid_properties.push('invalid value for "num_commits", num_commits cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @draft.nil?
        invalid_properties.push('invalid value for "draft", draft cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @num_removed.nil?
        invalid_properties.push('invalid value for "num_removed", num_removed cannot be nil.')
      end

      if @num_modified.nil?
        invalid_properties.push('invalid value for "num_modified", num_modified cannot be nil.')
      end

      if @target_branch_id.nil?
        invalid_properties.push('invalid value for "target_branch_id", target_branch_id cannot be nil.')
      end

      if @repository_id.nil?
        invalid_properties.push('invalid value for "repository_id", repository_id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @entity_type.nil?
      return false if @closed.nil?
      return false if @merged.nil?
      return false if @num_added.nil?
      return false if @branch_id.nil?
      return false if @number.nil?
      return false if @branch_name.nil?
      return false if @target_branch_name.nil?
      return false if @num_commits.nil?
      return false if @title.nil?
      return false if @updated_at.nil?
      return false if @draft.nil?
      return false if @id.nil?
      return false if @url.nil?
      return false if @num_removed.nil?
      return false if @num_modified.nil?
      return false if @target_branch_id.nil?
      return false if @repository_id.nil?
      return false if @created_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          entity_type == o.entity_type &&
          closed == o.closed &&
          merged == o.merged &&
          num_added == o.num_added &&
          branch_id == o.branch_id &&
          number == o.number &&
          branch_name == o.branch_name &&
          target_branch_name == o.target_branch_name &&
          num_commits == o.num_commits &&
          title == o.title &&
          updated_at == o.updated_at &&
          draft == o.draft &&
          id == o.id &&
          vcs_labels == o.vcs_labels &&
          url == o.url &&
          num_removed == o.num_removed &&
          review_status == o.review_status &&
          num_modified == o.num_modified &&
          build_status == o.build_status &&
          target_branch_id == o.target_branch_id &&
          repository_id == o.repository_id &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [entity_type, closed, merged, num_added, branch_id, number, branch_name, target_branch_name, num_commits, title, updated_at, draft, id, vcs_labels, url, num_removed, review_status, num_modified, build_status, target_branch_id, repository_id, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Shortcut.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
