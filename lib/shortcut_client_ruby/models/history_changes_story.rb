=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Shortcut
  # The changes that have occurred as a result of the action.
  class HistoryChangesStory
    attr_accessor :description

    attr_accessor :archived

    attr_accessor :started

    attr_accessor :task_ids

    attr_accessor :mention_ids

    attr_accessor :story_type

    attr_accessor :name

    attr_accessor :completed

    attr_accessor :blocker

    attr_accessor :epic_id

    attr_accessor :branch_ids

    attr_accessor :commit_ids

    attr_accessor :requested_by_id

    attr_accessor :iteration_id

    attr_accessor :label_ids

    attr_accessor :workflow_state_id

    attr_accessor :object_story_link_ids

    attr_accessor :follower_ids

    attr_accessor :owner_ids

    attr_accessor :estimate

    attr_accessor :subject_story_link_ids

    attr_accessor :blocked

    attr_accessor :project_id

    attr_accessor :deadline

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'description',
        :'archived' => :'archived',
        :'started' => :'started',
        :'task_ids' => :'task_ids',
        :'mention_ids' => :'mention_ids',
        :'story_type' => :'story_type',
        :'name' => :'name',
        :'completed' => :'completed',
        :'blocker' => :'blocker',
        :'epic_id' => :'epic_id',
        :'branch_ids' => :'branch_ids',
        :'commit_ids' => :'commit_ids',
        :'requested_by_id' => :'requested_by_id',
        :'iteration_id' => :'iteration_id',
        :'label_ids' => :'label_ids',
        :'workflow_state_id' => :'workflow_state_id',
        :'object_story_link_ids' => :'object_story_link_ids',
        :'follower_ids' => :'follower_ids',
        :'owner_ids' => :'owner_ids',
        :'estimate' => :'estimate',
        :'subject_story_link_ids' => :'subject_story_link_ids',
        :'blocked' => :'blocked',
        :'project_id' => :'project_id',
        :'deadline' => :'deadline'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'description' => :'StoryHistoryChangeOldNewStr',
        :'archived' => :'StoryHistoryChangeOldNewBool',
        :'started' => :'StoryHistoryChangeOldNewBool',
        :'task_ids' => :'StoryHistoryChangeAddsRemovesInt',
        :'mention_ids' => :'StoryHistoryChangeAddsRemovesUuid',
        :'story_type' => :'StoryHistoryChangeOldNewStr',
        :'name' => :'StoryHistoryChangeOldNewStr',
        :'completed' => :'StoryHistoryChangeOldNewBool',
        :'blocker' => :'StoryHistoryChangeOldNewBool',
        :'epic_id' => :'StoryHistoryChangeOldNewInt',
        :'branch_ids' => :'StoryHistoryChangeAddsRemovesInt',
        :'commit_ids' => :'StoryHistoryChangeAddsRemovesInt',
        :'requested_by_id' => :'StoryHistoryChangeOldNewUuid',
        :'iteration_id' => :'StoryHistoryChangeOldNewInt',
        :'label_ids' => :'StoryHistoryChangeAddsRemovesInt',
        :'workflow_state_id' => :'StoryHistoryChangeOldNewInt',
        :'object_story_link_ids' => :'StoryHistoryChangeAddsRemovesInt',
        :'follower_ids' => :'StoryHistoryChangeAddsRemovesUuid',
        :'owner_ids' => :'StoryHistoryChangeAddsRemovesUuid',
        :'estimate' => :'StoryHistoryChangeOldNewInt',
        :'subject_story_link_ids' => :'StoryHistoryChangeAddsRemovesInt',
        :'blocked' => :'StoryHistoryChangeOldNewBool',
        :'project_id' => :'StoryHistoryChangeOldNewInt',
        :'deadline' => :'StoryHistoryChangeOldNewStr'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Shortcut::HistoryChangesStory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Shortcut::HistoryChangesStory`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'started')
        self.started = attributes[:'started']
      end

      if attributes.key?(:'task_ids')
        self.task_ids = attributes[:'task_ids']
      end

      if attributes.key?(:'mention_ids')
        self.mention_ids = attributes[:'mention_ids']
      end

      if attributes.key?(:'story_type')
        self.story_type = attributes[:'story_type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.key?(:'blocker')
        self.blocker = attributes[:'blocker']
      end

      if attributes.key?(:'epic_id')
        self.epic_id = attributes[:'epic_id']
      end

      if attributes.key?(:'branch_ids')
        self.branch_ids = attributes[:'branch_ids']
      end

      if attributes.key?(:'commit_ids')
        self.commit_ids = attributes[:'commit_ids']
      end

      if attributes.key?(:'requested_by_id')
        self.requested_by_id = attributes[:'requested_by_id']
      end

      if attributes.key?(:'iteration_id')
        self.iteration_id = attributes[:'iteration_id']
      end

      if attributes.key?(:'label_ids')
        self.label_ids = attributes[:'label_ids']
      end

      if attributes.key?(:'workflow_state_id')
        self.workflow_state_id = attributes[:'workflow_state_id']
      end

      if attributes.key?(:'object_story_link_ids')
        self.object_story_link_ids = attributes[:'object_story_link_ids']
      end

      if attributes.key?(:'follower_ids')
        self.follower_ids = attributes[:'follower_ids']
      end

      if attributes.key?(:'owner_ids')
        self.owner_ids = attributes[:'owner_ids']
      end

      if attributes.key?(:'estimate')
        self.estimate = attributes[:'estimate']
      end

      if attributes.key?(:'subject_story_link_ids')
        self.subject_story_link_ids = attributes[:'subject_story_link_ids']
      end

      if attributes.key?(:'blocked')
        self.blocked = attributes[:'blocked']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'deadline')
        self.deadline = attributes[:'deadline']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          archived == o.archived &&
          started == o.started &&
          task_ids == o.task_ids &&
          mention_ids == o.mention_ids &&
          story_type == o.story_type &&
          name == o.name &&
          completed == o.completed &&
          blocker == o.blocker &&
          epic_id == o.epic_id &&
          branch_ids == o.branch_ids &&
          commit_ids == o.commit_ids &&
          requested_by_id == o.requested_by_id &&
          iteration_id == o.iteration_id &&
          label_ids == o.label_ids &&
          workflow_state_id == o.workflow_state_id &&
          object_story_link_ids == o.object_story_link_ids &&
          follower_ids == o.follower_ids &&
          owner_ids == o.owner_ids &&
          estimate == o.estimate &&
          subject_story_link_ids == o.subject_story_link_ids &&
          blocked == o.blocked &&
          project_id == o.project_id &&
          deadline == o.deadline
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, archived, started, task_ids, mention_ids, story_type, name, completed, blocker, epic_id, branch_ids, commit_ids, requested_by_id, iteration_id, label_ids, workflow_state_id, object_story_link_ids, follower_ids, owner_ids, estimate, subject_story_link_ids, blocked, project_id, deadline].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Shortcut.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
