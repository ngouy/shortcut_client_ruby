=begin
#Shortcut API

#Shortcut API

The version of the OpenAPI document: 3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Shortcut
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Category
    # Create Category allows you to create a new Category in Shortcut.
    # @param create_category [CreateCategory] 
    # @param [Hash] opts the optional parameters
    # @return [Category]
    def create_category(create_category, opts = {})
      data, _status_code, _headers = create_category_with_http_info(create_category, opts)
      data
    end

    # Create Category
    # Create Category allows you to create a new Category in Shortcut.
    # @param create_category [CreateCategory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def create_category_with_http_info(create_category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_category ...'
      end
      # verify the required parameter 'create_category' is set
      if @api_client.config.client_side_validation && create_category.nil?
        fail ArgumentError, "Missing the required parameter 'create_category' when calling DefaultApi.create_category"
      end
      # resource path
      local_var_path = '/api/v3/categories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_category)

      # return_type
      return_type = opts[:debug_return_type] || 'Category'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Entity Template
    # Create a new entity template for your organization.
    # @param create_entity_template [CreateEntityTemplate] Request paramaters for creating an entirely new entity template.
    # @param [Hash] opts the optional parameters
    # @return [EntityTemplate]
    def create_entity_template(create_entity_template, opts = {})
      data, _status_code, _headers = create_entity_template_with_http_info(create_entity_template, opts)
      data
    end

    # Create Entity Template
    # Create a new entity template for your organization.
    # @param create_entity_template [CreateEntityTemplate] Request paramaters for creating an entirely new entity template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityTemplate, Integer, Hash)>] EntityTemplate data, response status code and response headers
    def create_entity_template_with_http_info(create_entity_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_entity_template ...'
      end
      # verify the required parameter 'create_entity_template' is set
      if @api_client.config.client_side_validation && create_entity_template.nil?
        fail ArgumentError, "Missing the required parameter 'create_entity_template' when calling DefaultApi.create_entity_template"
      end
      # resource path
      local_var_path = '/api/v3/entity-templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_entity_template)

      # return_type
      return_type = opts[:debug_return_type] || 'EntityTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_entity_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_entity_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Epic
    # Create Epic allows you to create a new Epic in Shortcut.
    # @param create_epic [CreateEpic] 
    # @param [Hash] opts the optional parameters
    # @return [Epic]
    def create_epic(create_epic, opts = {})
      data, _status_code, _headers = create_epic_with_http_info(create_epic, opts)
      data
    end

    # Create Epic
    # Create Epic allows you to create a new Epic in Shortcut.
    # @param create_epic [CreateEpic] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Epic, Integer, Hash)>] Epic data, response status code and response headers
    def create_epic_with_http_info(create_epic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_epic ...'
      end
      # verify the required parameter 'create_epic' is set
      if @api_client.config.client_side_validation && create_epic.nil?
        fail ArgumentError, "Missing the required parameter 'create_epic' when calling DefaultApi.create_epic"
      end
      # resource path
      local_var_path = '/api/v3/epics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_epic)

      # return_type
      return_type = opts[:debug_return_type] || 'Epic'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_epic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_epic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Epic Comment
    # This endpoint allows you to create a threaded Comment on an Epic.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param create_epic_comment [CreateEpicComment] 
    # @param [Hash] opts the optional parameters
    # @return [ThreadedComment]
    def create_epic_comment(epic_public_id, create_epic_comment, opts = {})
      data, _status_code, _headers = create_epic_comment_with_http_info(epic_public_id, create_epic_comment, opts)
      data
    end

    # Create Epic Comment
    # This endpoint allows you to create a threaded Comment on an Epic.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param create_epic_comment [CreateEpicComment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThreadedComment, Integer, Hash)>] ThreadedComment data, response status code and response headers
    def create_epic_comment_with_http_info(epic_public_id, create_epic_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_epic_comment ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.create_epic_comment"
      end
      # verify the required parameter 'create_epic_comment' is set
      if @api_client.config.client_side_validation && create_epic_comment.nil?
        fail ArgumentError, "Missing the required parameter 'create_epic_comment' when calling DefaultApi.create_epic_comment"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/comments'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_epic_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'ThreadedComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_epic_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_epic_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Epic Comment Comment
    # This endpoint allows you to create a nested Comment reply to an existing Epic Comment.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the parent Epic Comment.
    # @param create_comment_comment [CreateCommentComment] 
    # @param [Hash] opts the optional parameters
    # @return [ThreadedComment]
    def create_epic_comment_comment(epic_public_id, comment_public_id, create_comment_comment, opts = {})
      data, _status_code, _headers = create_epic_comment_comment_with_http_info(epic_public_id, comment_public_id, create_comment_comment, opts)
      data
    end

    # Create Epic Comment Comment
    # This endpoint allows you to create a nested Comment reply to an existing Epic Comment.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the parent Epic Comment.
    # @param create_comment_comment [CreateCommentComment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThreadedComment, Integer, Hash)>] ThreadedComment data, response status code and response headers
    def create_epic_comment_comment_with_http_info(epic_public_id, comment_public_id, create_comment_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_epic_comment_comment ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.create_epic_comment_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.create_epic_comment_comment"
      end
      # verify the required parameter 'create_comment_comment' is set
      if @api_client.config.client_side_validation && create_comment_comment.nil?
        fail ArgumentError, "Missing the required parameter 'create_comment_comment' when calling DefaultApi.create_epic_comment_comment"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_comment_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'ThreadedComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_epic_comment_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_epic_comment_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Group
    # @param create_group [CreateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def create_group(create_group, opts = {})
      data, _status_code, _headers = create_group_with_http_info(create_group, opts)
      data
    end

    # Create Group
    # @param create_group [CreateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Integer, Hash)>] Group data, response status code and response headers
    def create_group_with_http_info(create_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_group ...'
      end
      # verify the required parameter 'create_group' is set
      if @api_client.config.client_side_validation && create_group.nil?
        fail ArgumentError, "Missing the required parameter 'create_group' when calling DefaultApi.create_group"
      end
      # resource path
      local_var_path = '/api/v3/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_group)

      # return_type
      return_type = opts[:debug_return_type] || 'Group'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Iteration
    # @param create_iteration [CreateIteration] 
    # @param [Hash] opts the optional parameters
    # @return [Iteration]
    def create_iteration(create_iteration, opts = {})
      data, _status_code, _headers = create_iteration_with_http_info(create_iteration, opts)
      data
    end

    # Create Iteration
    # @param create_iteration [CreateIteration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Iteration, Integer, Hash)>] Iteration data, response status code and response headers
    def create_iteration_with_http_info(create_iteration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_iteration ...'
      end
      # verify the required parameter 'create_iteration' is set
      if @api_client.config.client_side_validation && create_iteration.nil?
        fail ArgumentError, "Missing the required parameter 'create_iteration' when calling DefaultApi.create_iteration"
      end
      # resource path
      local_var_path = '/api/v3/iterations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_iteration)

      # return_type
      return_type = opts[:debug_return_type] || 'Iteration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_iteration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_iteration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Label
    # Create Label allows you to create a new Label in Shortcut.
    # @param create_label_params [CreateLabelParams] Request parameters for creating a Label on a Shortcut Story.
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def create_label(create_label_params, opts = {})
      data, _status_code, _headers = create_label_with_http_info(create_label_params, opts)
      data
    end

    # Create Label
    # Create Label allows you to create a new Label in Shortcut.
    # @param create_label_params [CreateLabelParams] Request parameters for creating a Label on a Shortcut Story.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def create_label_with_http_info(create_label_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_label ...'
      end
      # verify the required parameter 'create_label_params' is set
      if @api_client.config.client_side_validation && create_label_params.nil?
        fail ArgumentError, "Missing the required parameter 'create_label_params' when calling DefaultApi.create_label"
      end
      # resource path
      local_var_path = '/api/v3/labels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_label_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Linked File
    # Create Linked File allows you to create a new Linked File in Shortcut.
    # @param create_linked_file [CreateLinkedFile] 
    # @param [Hash] opts the optional parameters
    # @return [LinkedFile]
    def create_linked_file(create_linked_file, opts = {})
      data, _status_code, _headers = create_linked_file_with_http_info(create_linked_file, opts)
      data
    end

    # Create Linked File
    # Create Linked File allows you to create a new Linked File in Shortcut.
    # @param create_linked_file [CreateLinkedFile] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkedFile, Integer, Hash)>] LinkedFile data, response status code and response headers
    def create_linked_file_with_http_info(create_linked_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_linked_file ...'
      end
      # verify the required parameter 'create_linked_file' is set
      if @api_client.config.client_side_validation && create_linked_file.nil?
        fail ArgumentError, "Missing the required parameter 'create_linked_file' when calling DefaultApi.create_linked_file"
      end
      # resource path
      local_var_path = '/api/v3/linked-files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_linked_file)

      # return_type
      return_type = opts[:debug_return_type] || 'LinkedFile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_linked_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_linked_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Milestone
    # Create Milestone allows you to create a new Milestone in Shortcut.
    # @param create_milestone [CreateMilestone] 
    # @param [Hash] opts the optional parameters
    # @return [Milestone]
    def create_milestone(create_milestone, opts = {})
      data, _status_code, _headers = create_milestone_with_http_info(create_milestone, opts)
      data
    end

    # Create Milestone
    # Create Milestone allows you to create a new Milestone in Shortcut.
    # @param create_milestone [CreateMilestone] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def create_milestone_with_http_info(create_milestone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_milestone ...'
      end
      # verify the required parameter 'create_milestone' is set
      if @api_client.config.client_side_validation && create_milestone.nil?
        fail ArgumentError, "Missing the required parameter 'create_milestone' when calling DefaultApi.create_milestone"
      end
      # resource path
      local_var_path = '/api/v3/milestones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_milestone)

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Multiple Stories
    # Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://shortcut.com/api/#create-story).
    # @param create_stories [CreateStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def create_multiple_stories(create_stories, opts = {})
      data, _status_code, _headers = create_multiple_stories_with_http_info(create_stories, opts)
      data
    end

    # Create Multiple Stories
    # Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://shortcut.com/api/#create-story).
    # @param create_stories [CreateStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def create_multiple_stories_with_http_info(create_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_multiple_stories ...'
      end
      # verify the required parameter 'create_stories' is set
      if @api_client.config.client_side_validation && create_stories.nil?
        fail ArgumentError, "Missing the required parameter 'create_stories' when calling DefaultApi.create_multiple_stories"
      end
      # resource path
      local_var_path = '/api/v3/stories/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_multiple_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_multiple_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Project
    # Create Project is used to create a new Shortcut Project.
    # @param create_project [CreateProject] 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def create_project(create_project, opts = {})
      data, _status_code, _headers = create_project_with_http_info(create_project, opts)
      data
    end

    # Create Project
    # Create Project is used to create a new Shortcut Project.
    # @param create_project [CreateProject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def create_project_with_http_info(create_project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_project ...'
      end
      # verify the required parameter 'create_project' is set
      if @api_client.config.client_side_validation && create_project.nil?
        fail ArgumentError, "Missing the required parameter 'create_project' when calling DefaultApi.create_project"
      end
      # resource path
      local_var_path = '/api/v3/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_project)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Story
    # Create Story is used to add a new story to your Shortcut.
    # @param create_story_params [CreateStoryParams] Request parameters for creating a story.
    # @param [Hash] opts the optional parameters
    # @return [Story]
    def create_story(create_story_params, opts = {})
      data, _status_code, _headers = create_story_with_http_info(create_story_params, opts)
      data
    end

    # Create Story
    # Create Story is used to add a new story to your Shortcut.
    # @param create_story_params [CreateStoryParams] Request parameters for creating a story.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Story, Integer, Hash)>] Story data, response status code and response headers
    def create_story_with_http_info(create_story_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_story ...'
      end
      # verify the required parameter 'create_story_params' is set
      if @api_client.config.client_side_validation && create_story_params.nil?
        fail ArgumentError, "Missing the required parameter 'create_story_params' when calling DefaultApi.create_story"
      end
      # resource path
      local_var_path = '/api/v3/stories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_story_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Story'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_story",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_story\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Story Comment
    # Create Comment allows you to create a Comment on any Story.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param create_story_comment [CreateStoryComment] 
    # @param [Hash] opts the optional parameters
    # @return [StoryComment]
    def create_story_comment(story_public_id, create_story_comment, opts = {})
      data, _status_code, _headers = create_story_comment_with_http_info(story_public_id, create_story_comment, opts)
      data
    end

    # Create Story Comment
    # Create Comment allows you to create a Comment on any Story.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param create_story_comment [CreateStoryComment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoryComment, Integer, Hash)>] StoryComment data, response status code and response headers
    def create_story_comment_with_http_info(story_public_id, create_story_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_story_comment ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.create_story_comment"
      end
      # verify the required parameter 'create_story_comment' is set
      if @api_client.config.client_side_validation && create_story_comment.nil?
        fail ArgumentError, "Missing the required parameter 'create_story_comment' when calling DefaultApi.create_story_comment"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/comments'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_story_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'StoryComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_story_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_story_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Story Link
    # Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.  The subject story acts on the object Story; the object story is the direct object of the sentence.  The subject story \"blocks\", \"duplicates\", or \"relates to\" the object story.  Examples: - \"story 5 blocks story 6” -- story 6 is now \"blocked\" until story 5 is moved to a Done workflow state. - \"story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived). - \"story 7 relates to story 3”
    # @param create_story_link [CreateStoryLink] 
    # @param [Hash] opts the optional parameters
    # @return [StoryLink]
    def create_story_link(create_story_link, opts = {})
      data, _status_code, _headers = create_story_link_with_http_info(create_story_link, opts)
      data
    end

    # Create Story Link
    # Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -&gt; verb -&gt; object.  The subject story acts on the object Story; the object story is the direct object of the sentence.  The subject story \&quot;blocks\&quot;, \&quot;duplicates\&quot;, or \&quot;relates to\&quot; the object story.  Examples: - \&quot;story 5 blocks story 6” -- story 6 is now \&quot;blocked\&quot; until story 5 is moved to a Done workflow state. - \&quot;story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived). - \&quot;story 7 relates to story 3”
    # @param create_story_link [CreateStoryLink] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoryLink, Integer, Hash)>] StoryLink data, response status code and response headers
    def create_story_link_with_http_info(create_story_link, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_story_link ...'
      end
      # verify the required parameter 'create_story_link' is set
      if @api_client.config.client_side_validation && create_story_link.nil?
        fail ArgumentError, "Missing the required parameter 'create_story_link' when calling DefaultApi.create_story_link"
      end
      # resource path
      local_var_path = '/api/v3/story-links'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_story_link)

      # return_type
      return_type = opts[:debug_return_type] || 'StoryLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_story_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_story_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Story Reaction
    # Create a reaction to a story comment.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param create_or_delete_story_reaction [CreateOrDeleteStoryReaction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StoryReaction>]
    def create_story_reaction(story_public_id, comment_public_id, create_or_delete_story_reaction, opts = {})
      data, _status_code, _headers = create_story_reaction_with_http_info(story_public_id, comment_public_id, create_or_delete_story_reaction, opts)
      data
    end

    # Create Story Reaction
    # Create a reaction to a story comment.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param create_or_delete_story_reaction [CreateOrDeleteStoryReaction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StoryReaction>, Integer, Hash)>] Array<StoryReaction> data, response status code and response headers
    def create_story_reaction_with_http_info(story_public_id, comment_public_id, create_or_delete_story_reaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_story_reaction ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.create_story_reaction"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.create_story_reaction"
      end
      # verify the required parameter 'create_or_delete_story_reaction' is set
      if @api_client.config.client_side_validation && create_or_delete_story_reaction.nil?
        fail ArgumentError, "Missing the required parameter 'create_or_delete_story_reaction' when calling DefaultApi.create_story_reaction"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_or_delete_story_reaction)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StoryReaction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_story_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_story_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Task
    # Create Task is used to create a new task in a Story.
    # @param story_public_id [Integer] The ID of the Story that the Task will be in.
    # @param create_task [CreateTask] 
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def create_task(story_public_id, create_task, opts = {})
      data, _status_code, _headers = create_task_with_http_info(story_public_id, create_task, opts)
      data
    end

    # Create Task
    # Create Task is used to create a new task in a Story.
    # @param story_public_id [Integer] The ID of the Story that the Task will be in.
    # @param create_task [CreateTask] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def create_task_with_http_info(story_public_id, create_task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_task ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.create_task"
      end
      # verify the required parameter 'create_task' is set
      if @api_client.config.client_side_validation && create_task.nil?
        fail ArgumentError, "Missing the required parameter 'create_task' when calling DefaultApi.create_task"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/tasks'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_task)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Category
    # Delete Category can be used to delete any Category.
    # @param category_public_id [Integer] The unique ID of the Category.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_category(category_public_id, opts = {})
      delete_category_with_http_info(category_public_id, opts)
      nil
    end

    # Delete Category
    # Delete Category can be used to delete any Category.
    # @param category_public_id [Integer] The unique ID of the Category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_category_with_http_info(category_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_category ...'
      end
      # verify the required parameter 'category_public_id' is set
      if @api_client.config.client_side_validation && category_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_public_id' when calling DefaultApi.delete_category"
      end
      # resource path
      local_var_path = '/api/v3/categories/{category-public-id}'.sub('{' + 'category-public-id' + '}', CGI.escape(category_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Entity Template
    # @param entity_template_public_id [String] The unique ID of the entity template.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_template(entity_template_public_id, opts = {})
      delete_entity_template_with_http_info(entity_template_public_id, opts)
      nil
    end

    # Delete Entity Template
    # @param entity_template_public_id [String] The unique ID of the entity template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_template_with_http_info(entity_template_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_entity_template ...'
      end
      # verify the required parameter 'entity_template_public_id' is set
      if @api_client.config.client_side_validation && entity_template_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_template_public_id' when calling DefaultApi.delete_entity_template"
      end
      # resource path
      local_var_path = '/api/v3/entity-templates/{entity-template-public-id}'.sub('{' + 'entity-template-public-id' + '}', CGI.escape(entity_template_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_entity_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_entity_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Epic
    # Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_epic(epic_public_id, opts = {})
      delete_epic_with_http_info(epic_public_id, opts)
      nil
    end

    # Delete Epic
    # Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_epic_with_http_info(epic_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_epic ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.delete_epic"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_epic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_epic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Epic Comment
    # This endpoint allows you to delete a Comment from an Epic.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_epic_comment(epic_public_id, comment_public_id, opts = {})
      delete_epic_comment_with_http_info(epic_public_id, comment_public_id, opts)
      nil
    end

    # Delete Epic Comment
    # This endpoint allows you to delete a Comment from an Epic.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_epic_comment_with_http_info(epic_public_id, comment_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_epic_comment ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.delete_epic_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.delete_epic_comment"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_epic_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_epic_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete File
    # Delete File deletes a previously uploaded file.
    # @param file_public_id [Integer] The File’s unique ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file(file_public_id, opts = {})
      delete_file_with_http_info(file_public_id, opts)
      nil
    end

    # Delete File
    # Delete File deletes a previously uploaded file.
    # @param file_public_id [Integer] The File’s unique ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(file_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_file ...'
      end
      # verify the required parameter 'file_public_id' is set
      if @api_client.config.client_side_validation && file_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_public_id' when calling DefaultApi.delete_file"
      end
      # resource path
      local_var_path = '/api/v3/files/{file-public-id}'.sub('{' + 'file-public-id' + '}', CGI.escape(file_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Iteration
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_iteration(iteration_public_id, opts = {})
      delete_iteration_with_http_info(iteration_public_id, opts)
      nil
    end

    # Delete Iteration
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_iteration_with_http_info(iteration_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_iteration ...'
      end
      # verify the required parameter 'iteration_public_id' is set
      if @api_client.config.client_side_validation && iteration_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_public_id' when calling DefaultApi.delete_iteration"
      end
      # resource path
      local_var_path = '/api/v3/iterations/{iteration-public-id}'.sub('{' + 'iteration-public-id' + '}', CGI.escape(iteration_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_iteration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_iteration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Label
    # Delete Label can be used to delete any Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_label(label_public_id, opts = {})
      delete_label_with_http_info(label_public_id, opts)
      nil
    end

    # Delete Label
    # Delete Label can be used to delete any Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_label_with_http_info(label_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_label ...'
      end
      # verify the required parameter 'label_public_id' is set
      if @api_client.config.client_side_validation && label_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_public_id' when calling DefaultApi.delete_label"
      end
      # resource path
      local_var_path = '/api/v3/labels/{label-public-id}'.sub('{' + 'label-public-id' + '}', CGI.escape(label_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Linked File
    # Delete Linked File can be used to delete any previously attached Linked-File.
    # @param linked_file_public_id [Integer] The unique identifier of the linked file.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_linked_file(linked_file_public_id, opts = {})
      delete_linked_file_with_http_info(linked_file_public_id, opts)
      nil
    end

    # Delete Linked File
    # Delete Linked File can be used to delete any previously attached Linked-File.
    # @param linked_file_public_id [Integer] The unique identifier of the linked file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_linked_file_with_http_info(linked_file_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_linked_file ...'
      end
      # verify the required parameter 'linked_file_public_id' is set
      if @api_client.config.client_side_validation && linked_file_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_file_public_id' when calling DefaultApi.delete_linked_file"
      end
      # resource path
      local_var_path = '/api/v3/linked-files/{linked-file-public-id}'.sub('{' + 'linked-file-public-id' + '}', CGI.escape(linked_file_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_linked_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_linked_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Milestone
    # Delete Milestone can be used to delete any Milestone.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_milestone(milestone_public_id, opts = {})
      delete_milestone_with_http_info(milestone_public_id, opts)
      nil
    end

    # Delete Milestone
    # Delete Milestone can be used to delete any Milestone.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_milestone_with_http_info(milestone_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_milestone ...'
      end
      # verify the required parameter 'milestone_public_id' is set
      if @api_client.config.client_side_validation && milestone_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_public_id' when calling DefaultApi.delete_milestone"
      end
      # resource path
      local_var_path = '/api/v3/milestones/{milestone-public-id}'.sub('{' + 'milestone-public-id' + '}', CGI.escape(milestone_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Multiple Stories
    # Delete Multiple Stories allows you to delete multiple archived stories at once.
    # @param delete_stories [DeleteStories] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_multiple_stories(delete_stories, opts = {})
      delete_multiple_stories_with_http_info(delete_stories, opts)
      nil
    end

    # Delete Multiple Stories
    # Delete Multiple Stories allows you to delete multiple archived stories at once.
    # @param delete_stories [DeleteStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_multiple_stories_with_http_info(delete_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_multiple_stories ...'
      end
      # verify the required parameter 'delete_stories' is set
      if @api_client.config.client_side_validation && delete_stories.nil?
        fail ArgumentError, "Missing the required parameter 'delete_stories' when calling DefaultApi.delete_multiple_stories"
      end
      # resource path
      local_var_path = '/api/v3/stories/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(delete_stories)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_multiple_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_multiple_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Project
    # Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_project(project_public_id, opts = {})
      delete_project_with_http_info(project_public_id, opts)
      nil
    end

    # Delete Project
    # Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_project_with_http_info(project_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_project ...'
      end
      # verify the required parameter 'project_public_id' is set
      if @api_client.config.client_side_validation && project_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_public_id' when calling DefaultApi.delete_project"
      end
      # resource path
      local_var_path = '/api/v3/projects/{project-public-id}'.sub('{' + 'project-public-id' + '}', CGI.escape(project_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Story
    # Delete Story can be used to delete any Story.
    # @param story_public_id [Integer] The ID of the Story.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_story(story_public_id, opts = {})
      delete_story_with_http_info(story_public_id, opts)
      nil
    end

    # Delete Story
    # Delete Story can be used to delete any Story.
    # @param story_public_id [Integer] The ID of the Story.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_story_with_http_info(story_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_story ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.delete_story"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_story",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_story\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Story Comment
    # Delete a Comment from any story.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_story_comment(story_public_id, comment_public_id, opts = {})
      delete_story_comment_with_http_info(story_public_id, comment_public_id, opts)
      nil
    end

    # Delete Story Comment
    # Delete a Comment from any story.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_story_comment_with_http_info(story_public_id, comment_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_story_comment ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.delete_story_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.delete_story_comment"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/comments/{comment-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_story_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_story_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Story Link
    # Removes the relationship between the stories for the given Story Link.
    # @param story_link_public_id [Integer] The unique ID of the Story Link.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_story_link(story_link_public_id, opts = {})
      delete_story_link_with_http_info(story_link_public_id, opts)
      nil
    end

    # Delete Story Link
    # Removes the relationship between the stories for the given Story Link.
    # @param story_link_public_id [Integer] The unique ID of the Story Link.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_story_link_with_http_info(story_link_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_story_link ...'
      end
      # verify the required parameter 'story_link_public_id' is set
      if @api_client.config.client_side_validation && story_link_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_link_public_id' when calling DefaultApi.delete_story_link"
      end
      # resource path
      local_var_path = '/api/v3/story-links/{story-link-public-id}'.sub('{' + 'story-link-public-id' + '}', CGI.escape(story_link_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_story_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_story_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Story Reaction
    # Delete a reaction from any story comment.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param create_or_delete_story_reaction [CreateOrDeleteStoryReaction] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_story_reaction(story_public_id, comment_public_id, create_or_delete_story_reaction, opts = {})
      delete_story_reaction_with_http_info(story_public_id, comment_public_id, create_or_delete_story_reaction, opts)
      nil
    end

    # Delete Story Reaction
    # Delete a reaction from any story comment.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param create_or_delete_story_reaction [CreateOrDeleteStoryReaction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_story_reaction_with_http_info(story_public_id, comment_public_id, create_or_delete_story_reaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_story_reaction ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.delete_story_reaction"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.delete_story_reaction"
      end
      # verify the required parameter 'create_or_delete_story_reaction' is set
      if @api_client.config.client_side_validation && create_or_delete_story_reaction.nil?
        fail ArgumentError, "Missing the required parameter 'create_or_delete_story_reaction' when calling DefaultApi.delete_story_reaction"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_or_delete_story_reaction)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_story_reaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_story_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Task
    # Delete Task can be used to delete any previously created Task on a Story.
    # @param story_public_id [Integer] The unique ID of the Story this Task is associated with.
    # @param task_public_id [Integer] The unique ID of the Task.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_task(story_public_id, task_public_id, opts = {})
      delete_task_with_http_info(story_public_id, task_public_id, opts)
      nil
    end

    # Delete Task
    # Delete Task can be used to delete any previously created Task on a Story.
    # @param story_public_id [Integer] The unique ID of the Story this Task is associated with.
    # @param task_public_id [Integer] The unique ID of the Task.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_task_with_http_info(story_public_id, task_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_task ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.delete_task"
      end
      # verify the required parameter 'task_public_id' is set
      if @api_client.config.client_side_validation && task_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_public_id' when calling DefaultApi.delete_task"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/tasks/{task-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'task-public-id' + '}', CGI.escape(task_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Groups
    # Disables Groups for the current workspace2
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_groups(opts = {})
      disable_groups_with_http_info(opts)
      nil
    end

    # Disable Groups
    # Disables Groups for the current workspace2
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.disable_groups ...'
      end
      # resource path
      local_var_path = '/api/v3/groups/disable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.disable_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#disable_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Iterations
    # Disables Iterations for the current workspace
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_iterations(opts = {})
      disable_iterations_with_http_info(opts)
      nil
    end

    # Disable Iterations
    # Disables Iterations for the current workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_iterations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.disable_iterations ...'
      end
      # resource path
      local_var_path = '/api/v3/iterations/disable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.disable_iterations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#disable_iterations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Story Templates
    # Disables the Story Template feature for the given Organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_story_templates(opts = {})
      disable_story_templates_with_http_info(opts)
      nil
    end

    # Disable Story Templates
    # Disables the Story Template feature for the given Organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_story_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.disable_story_templates ...'
      end
      # resource path
      local_var_path = '/api/v3/entity-templates/disable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.disable_story_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#disable_story_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Groups
    # Enables Groups for the current workspace2
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_groups(opts = {})
      enable_groups_with_http_info(opts)
      nil
    end

    # Enable Groups
    # Enables Groups for the current workspace2
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.enable_groups ...'
      end
      # resource path
      local_var_path = '/api/v3/groups/enable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.enable_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#enable_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Iterations
    # Enables Iterations for the current workspace
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_iterations(opts = {})
      enable_iterations_with_http_info(opts)
      nil
    end

    # Enable Iterations
    # Enables Iterations for the current workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_iterations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.enable_iterations ...'
      end
      # resource path
      local_var_path = '/api/v3/iterations/enable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.enable_iterations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#enable_iterations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Story Templates
    # Enables the Story Template feature for the given Organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_story_templates(opts = {})
      enable_story_templates_with_http_info(opts)
      nil
    end

    # Enable Story Templates
    # Enables the Story Template feature for the given Organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_story_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.enable_story_templates ...'
      end
      # resource path
      local_var_path = '/api/v3/entity-templates/enable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.enable_story_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#enable_story_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Category
    # Get Category returns information about the selected Category.
    # @param category_public_id [Integer] The unique ID of the Category.
    # @param [Hash] opts the optional parameters
    # @return [Category]
    def get_category(category_public_id, opts = {})
      data, _status_code, _headers = get_category_with_http_info(category_public_id, opts)
      data
    end

    # Get Category
    # Get Category returns information about the selected Category.
    # @param category_public_id [Integer] The unique ID of the Category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def get_category_with_http_info(category_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_category ...'
      end
      # verify the required parameter 'category_public_id' is set
      if @api_client.config.client_side_validation && category_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_public_id' when calling DefaultApi.get_category"
      end
      # resource path
      local_var_path = '/api/v3/categories/{category-public-id}'.sub('{' + 'category-public-id' + '}', CGI.escape(category_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Category'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Current Member Info
    # Returns information about the authenticated member.
    # @param [Hash] opts the optional parameters
    # @return [MemberInfo]
    def get_current_member_info(opts = {})
      data, _status_code, _headers = get_current_member_info_with_http_info(opts)
      data
    end

    # Get Current Member Info
    # Returns information about the authenticated member.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberInfo, Integer, Hash)>] MemberInfo data, response status code and response headers
    def get_current_member_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_current_member_info ...'
      end
      # resource path
      local_var_path = '/api/v3/member'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MemberInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_current_member_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_current_member_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Entity Template
    # Get Entity Template returns information about a given entity template.
    # @param entity_template_public_id [String] The unique ID of the entity template.
    # @param [Hash] opts the optional parameters
    # @return [EntityTemplate]
    def get_entity_template(entity_template_public_id, opts = {})
      data, _status_code, _headers = get_entity_template_with_http_info(entity_template_public_id, opts)
      data
    end

    # Get Entity Template
    # Get Entity Template returns information about a given entity template.
    # @param entity_template_public_id [String] The unique ID of the entity template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityTemplate, Integer, Hash)>] EntityTemplate data, response status code and response headers
    def get_entity_template_with_http_info(entity_template_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_entity_template ...'
      end
      # verify the required parameter 'entity_template_public_id' is set
      if @api_client.config.client_side_validation && entity_template_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_template_public_id' when calling DefaultApi.get_entity_template"
      end
      # resource path
      local_var_path = '/api/v3/entity-templates/{entity-template-public-id}'.sub('{' + 'entity-template-public-id' + '}', CGI.escape(entity_template_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntityTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_entity_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_entity_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Epic
    # Get Epic returns information about the selected Epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [Epic]
    def get_epic(epic_public_id, opts = {})
      data, _status_code, _headers = get_epic_with_http_info(epic_public_id, opts)
      data
    end

    # Get Epic
    # Get Epic returns information about the selected Epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Epic, Integer, Hash)>] Epic data, response status code and response headers
    def get_epic_with_http_info(epic_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_epic ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.get_epic"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Epic'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_epic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_epic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Epic Comment
    # This endpoint returns information about the selected Epic Comment.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [ThreadedComment]
    def get_epic_comment(epic_public_id, comment_public_id, opts = {})
      data, _status_code, _headers = get_epic_comment_with_http_info(epic_public_id, comment_public_id, opts)
      data
    end

    # Get Epic Comment
    # This endpoint returns information about the selected Epic Comment.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThreadedComment, Integer, Hash)>] ThreadedComment data, response status code and response headers
    def get_epic_comment_with_http_info(epic_public_id, comment_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_epic_comment ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.get_epic_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.get_epic_comment"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ThreadedComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_epic_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_epic_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Epic Workflow
    # Get Epic Workflow returns the Epic Workflow for the organization.
    # @param [Hash] opts the optional parameters
    # @return [EpicWorkflow]
    def get_epic_workflow(opts = {})
      data, _status_code, _headers = get_epic_workflow_with_http_info(opts)
      data
    end

    # Get Epic Workflow
    # Get Epic Workflow returns the Epic Workflow for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EpicWorkflow, Integer, Hash)>] EpicWorkflow data, response status code and response headers
    def get_epic_workflow_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_epic_workflow ...'
      end
      # resource path
      local_var_path = '/api/v3/epic-workflow'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EpicWorkflow'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_epic_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_epic_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get External Link Stories
    # Get Stories which have a given External Link associated with them.
    # @param get_external_link_stories_params [GetExternalLinkStoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def get_external_link_stories(get_external_link_stories_params, opts = {})
      data, _status_code, _headers = get_external_link_stories_with_http_info(get_external_link_stories_params, opts)
      data
    end

    # Get External Link Stories
    # Get Stories which have a given External Link associated with them.
    # @param get_external_link_stories_params [GetExternalLinkStoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def get_external_link_stories_with_http_info(get_external_link_stories_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_external_link_stories ...'
      end
      # verify the required parameter 'get_external_link_stories_params' is set
      if @api_client.config.client_side_validation && get_external_link_stories_params.nil?
        fail ArgumentError, "Missing the required parameter 'get_external_link_stories_params' when calling DefaultApi.get_external_link_stories"
      end
      # resource path
      local_var_path = '/api/v3/external-link/stories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_external_link_stories_params)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_external_link_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_external_link_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get File
    # Get File returns information about the selected UploadedFile.
    # @param file_public_id [Integer] The File’s unique ID.
    # @param [Hash] opts the optional parameters
    # @return [UploadedFile]
    def get_file(file_public_id, opts = {})
      data, _status_code, _headers = get_file_with_http_info(file_public_id, opts)
      data
    end

    # Get File
    # Get File returns information about the selected UploadedFile.
    # @param file_public_id [Integer] The File’s unique ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadedFile, Integer, Hash)>] UploadedFile data, response status code and response headers
    def get_file_with_http_info(file_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_file ...'
      end
      # verify the required parameter 'file_public_id' is set
      if @api_client.config.client_side_validation && file_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_public_id' when calling DefaultApi.get_file"
      end
      # resource path
      local_var_path = '/api/v3/files/{file-public-id}'.sub('{' + 'file-public-id' + '}', CGI.escape(file_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UploadedFile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group
    # @param group_public_id [String] The unique ID of the Group.
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def get_group(group_public_id, opts = {})
      data, _status_code, _headers = get_group_with_http_info(group_public_id, opts)
      data
    end

    # Get Group
    # @param group_public_id [String] The unique ID of the Group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Integer, Hash)>] Group data, response status code and response headers
    def get_group_with_http_info(group_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_group ...'
      end
      # verify the required parameter 'group_public_id' is set
      if @api_client.config.client_side_validation && group_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_public_id' when calling DefaultApi.get_group"
      end
      # resource path
      local_var_path = '/api/v3/groups/{group-public-id}'.sub('{' + 'group-public-id' + '}', CGI.escape(group_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Group'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Iteration
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param [Hash] opts the optional parameters
    # @return [Iteration]
    def get_iteration(iteration_public_id, opts = {})
      data, _status_code, _headers = get_iteration_with_http_info(iteration_public_id, opts)
      data
    end

    # Get Iteration
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Iteration, Integer, Hash)>] Iteration data, response status code and response headers
    def get_iteration_with_http_info(iteration_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_iteration ...'
      end
      # verify the required parameter 'iteration_public_id' is set
      if @api_client.config.client_side_validation && iteration_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_public_id' when calling DefaultApi.get_iteration"
      end
      # resource path
      local_var_path = '/api/v3/iterations/{iteration-public-id}'.sub('{' + 'iteration-public-id' + '}', CGI.escape(iteration_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Iteration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_iteration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_iteration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Label
    # Get Label returns information about the selected Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def get_label(label_public_id, opts = {})
      data, _status_code, _headers = get_label_with_http_info(label_public_id, opts)
      data
    end

    # Get Label
    # Get Label returns information about the selected Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def get_label_with_http_info(label_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_label ...'
      end
      # verify the required parameter 'label_public_id' is set
      if @api_client.config.client_side_validation && label_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_public_id' when calling DefaultApi.get_label"
      end
      # resource path
      local_var_path = '/api/v3/labels/{label-public-id}'.sub('{' + 'label-public-id' + '}', CGI.escape(label_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Linked File
    # Get File returns information about the selected Linked File.
    # @param linked_file_public_id [Integer] The unique identifier of the linked file.
    # @param [Hash] opts the optional parameters
    # @return [LinkedFile]
    def get_linked_file(linked_file_public_id, opts = {})
      data, _status_code, _headers = get_linked_file_with_http_info(linked_file_public_id, opts)
      data
    end

    # Get Linked File
    # Get File returns information about the selected Linked File.
    # @param linked_file_public_id [Integer] The unique identifier of the linked file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkedFile, Integer, Hash)>] LinkedFile data, response status code and response headers
    def get_linked_file_with_http_info(linked_file_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_linked_file ...'
      end
      # verify the required parameter 'linked_file_public_id' is set
      if @api_client.config.client_side_validation && linked_file_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_file_public_id' when calling DefaultApi.get_linked_file"
      end
      # resource path
      local_var_path = '/api/v3/linked-files/{linked-file-public-id}'.sub('{' + 'linked-file-public-id' + '}', CGI.escape(linked_file_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkedFile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_linked_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_linked_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Member
    # Returns information about a Member.
    # @param member_public_id [String] The Member&#39;s unique ID.
    # @param get_member [GetMember] 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def get_member(member_public_id, get_member, opts = {})
      data, _status_code, _headers = get_member_with_http_info(member_public_id, get_member, opts)
      data
    end

    # Get Member
    # Returns information about a Member.
    # @param member_public_id [String] The Member&#39;s unique ID.
    # @param get_member [GetMember] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def get_member_with_http_info(member_public_id, get_member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_member ...'
      end
      # verify the required parameter 'member_public_id' is set
      if @api_client.config.client_side_validation && member_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_public_id' when calling DefaultApi.get_member"
      end
      # verify the required parameter 'get_member' is set
      if @api_client.config.client_side_validation && get_member.nil?
        fail ArgumentError, "Missing the required parameter 'get_member' when calling DefaultApi.get_member"
      end
      # resource path
      local_var_path = '/api/v3/members/{member-public-id}'.sub('{' + 'member-public-id' + '}', CGI.escape(member_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_member)

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Milestone
    # Get Milestone returns information about a chosen Milestone.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param [Hash] opts the optional parameters
    # @return [Milestone]
    def get_milestone(milestone_public_id, opts = {})
      data, _status_code, _headers = get_milestone_with_http_info(milestone_public_id, opts)
      data
    end

    # Get Milestone
    # Get Milestone returns information about a chosen Milestone.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def get_milestone_with_http_info(milestone_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_milestone ...'
      end
      # verify the required parameter 'milestone_public_id' is set
      if @api_client.config.client_side_validation && milestone_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_public_id' when calling DefaultApi.get_milestone"
      end
      # resource path
      local_var_path = '/api/v3/milestones/{milestone-public-id}'.sub('{' + 'milestone-public-id' + '}', CGI.escape(milestone_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Project
    # Get Project returns information about the selected Project.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def get_project(project_public_id, opts = {})
      data, _status_code, _headers = get_project_with_http_info(project_public_id, opts)
      data
    end

    # Get Project
    # Get Project returns information about the selected Project.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def get_project_with_http_info(project_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_project ...'
      end
      # verify the required parameter 'project_public_id' is set
      if @api_client.config.client_side_validation && project_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_public_id' when calling DefaultApi.get_project"
      end
      # resource path
      local_var_path = '/api/v3/projects/{project-public-id}'.sub('{' + 'project-public-id' + '}', CGI.escape(project_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Repository
    # Get Repository returns information about the selected Repository.
    # @param repo_public_id [Integer] The unique ID of the Repository.
    # @param [Hash] opts the optional parameters
    # @return [Repository]
    def get_repository(repo_public_id, opts = {})
      data, _status_code, _headers = get_repository_with_http_info(repo_public_id, opts)
      data
    end

    # Get Repository
    # Get Repository returns information about the selected Repository.
    # @param repo_public_id [Integer] The unique ID of the Repository.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Repository, Integer, Hash)>] Repository data, response status code and response headers
    def get_repository_with_http_info(repo_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_repository ...'
      end
      # verify the required parameter 'repo_public_id' is set
      if @api_client.config.client_side_validation && repo_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'repo_public_id' when calling DefaultApi.get_repository"
      end
      # resource path
      local_var_path = '/api/v3/repositories/{repo-public-id}'.sub('{' + 'repo-public-id' + '}', CGI.escape(repo_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Repository'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Story
    # Get Story returns information about a chosen Story.
    # @param story_public_id [Integer] The ID of the Story.
    # @param [Hash] opts the optional parameters
    # @return [Story]
    def get_story(story_public_id, opts = {})
      data, _status_code, _headers = get_story_with_http_info(story_public_id, opts)
      data
    end

    # Get Story
    # Get Story returns information about a chosen Story.
    # @param story_public_id [Integer] The ID of the Story.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Story, Integer, Hash)>] Story data, response status code and response headers
    def get_story_with_http_info(story_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_story ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.get_story"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Story'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_story",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_story\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Story Comment
    # Get Comment is used to get Comment information.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [StoryComment]
    def get_story_comment(story_public_id, comment_public_id, opts = {})
      data, _status_code, _headers = get_story_comment_with_http_info(story_public_id, comment_public_id, opts)
      data
    end

    # Get Story Comment
    # Get Comment is used to get Comment information.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoryComment, Integer, Hash)>] StoryComment data, response status code and response headers
    def get_story_comment_with_http_info(story_public_id, comment_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_story_comment ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.get_story_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.get_story_comment"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/comments/{comment-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StoryComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_story_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_story_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Story Link
    # Returns the stories and their relationship for the given Story Link.
    # @param story_link_public_id [Integer] The unique ID of the Story Link.
    # @param [Hash] opts the optional parameters
    # @return [StoryLink]
    def get_story_link(story_link_public_id, opts = {})
      data, _status_code, _headers = get_story_link_with_http_info(story_link_public_id, opts)
      data
    end

    # Get Story Link
    # Returns the stories and their relationship for the given Story Link.
    # @param story_link_public_id [Integer] The unique ID of the Story Link.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoryLink, Integer, Hash)>] StoryLink data, response status code and response headers
    def get_story_link_with_http_info(story_link_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_story_link ...'
      end
      # verify the required parameter 'story_link_public_id' is set
      if @api_client.config.client_side_validation && story_link_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_link_public_id' when calling DefaultApi.get_story_link"
      end
      # resource path
      local_var_path = '/api/v3/story-links/{story-link-public-id}'.sub('{' + 'story-link-public-id' + '}', CGI.escape(story_link_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StoryLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_story_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_story_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Task
    # Returns information about a chosen Task.
    # @param story_public_id [Integer] The unique ID of the Story this Task is associated with.
    # @param task_public_id [Integer] The unique ID of the Task.
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def get_task(story_public_id, task_public_id, opts = {})
      data, _status_code, _headers = get_task_with_http_info(story_public_id, task_public_id, opts)
      data
    end

    # Get Task
    # Returns information about a chosen Task.
    # @param story_public_id [Integer] The unique ID of the Story this Task is associated with.
    # @param task_public_id [Integer] The unique ID of the Task.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def get_task_with_http_info(story_public_id, task_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_task ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.get_task"
      end
      # verify the required parameter 'task_public_id' is set
      if @api_client.config.client_side_validation && task_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_public_id' when calling DefaultApi.get_task"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/tasks/{task-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'task-public-id' + '}', CGI.escape(task_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Workflow
    # Get Workflow returns information about a chosen Workflow.
    # @param workflow_public_id [Integer] The ID of the Workflow.
    # @param [Hash] opts the optional parameters
    # @return [Workflow]
    def get_workflow(workflow_public_id, opts = {})
      data, _status_code, _headers = get_workflow_with_http_info(workflow_public_id, opts)
      data
    end

    # Get Workflow
    # Get Workflow returns information about a chosen Workflow.
    # @param workflow_public_id [Integer] The ID of the Workflow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Workflow, Integer, Hash)>] Workflow data, response status code and response headers
    def get_workflow_with_http_info(workflow_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_workflow ...'
      end
      # verify the required parameter 'workflow_public_id' is set
      if @api_client.config.client_side_validation && workflow_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_public_id' when calling DefaultApi.get_workflow"
      end
      # resource path
      local_var_path = '/api/v3/workflows/{workflow-public-id}'.sub('{' + 'workflow-public-id' + '}', CGI.escape(workflow_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Workflow'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_workflow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_workflow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Categories
    # List Categories returns a list of all Categories and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<Category>]
    def list_categories(opts = {})
      data, _status_code, _headers = list_categories_with_http_info(opts)
      data
    end

    # List Categories
    # List Categories returns a list of all Categories and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Category>, Integer, Hash)>] Array<Category> data, response status code and response headers
    def list_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_categories ...'
      end
      # resource path
      local_var_path = '/api/v3/categories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Category>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Category Milestones
    # List Category Milestones returns a list of all Milestones with the Category.
    # @param category_public_id [Integer] The unique ID of the Category.
    # @param [Hash] opts the optional parameters
    # @return [Array<Milestone>]
    def list_category_milestones(category_public_id, opts = {})
      data, _status_code, _headers = list_category_milestones_with_http_info(category_public_id, opts)
      data
    end

    # List Category Milestones
    # List Category Milestones returns a list of all Milestones with the Category.
    # @param category_public_id [Integer] The unique ID of the Category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Milestone>, Integer, Hash)>] Array<Milestone> data, response status code and response headers
    def list_category_milestones_with_http_info(category_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_category_milestones ...'
      end
      # verify the required parameter 'category_public_id' is set
      if @api_client.config.client_side_validation && category_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_public_id' when calling DefaultApi.list_category_milestones"
      end
      # resource path
      local_var_path = '/api/v3/categories/{category-public-id}/milestones'.sub('{' + 'category-public-id' + '}', CGI.escape(category_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Milestone>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_category_milestones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_category_milestones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Entity Templates
    # List all the entity templates for an organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<EntityTemplate>]
    def list_entity_templates(opts = {})
      data, _status_code, _headers = list_entity_templates_with_http_info(opts)
      data
    end

    # List Entity Templates
    # List all the entity templates for an organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EntityTemplate>, Integer, Hash)>] Array<EntityTemplate> data, response status code and response headers
    def list_entity_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_entity_templates ...'
      end
      # resource path
      local_var_path = '/api/v3/entity-templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EntityTemplate>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_entity_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_entity_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Epic Comments
    # Get a list of all Comments on an Epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [Array<ThreadedComment>]
    def list_epic_comments(epic_public_id, opts = {})
      data, _status_code, _headers = list_epic_comments_with_http_info(epic_public_id, opts)
      data
    end

    # List Epic Comments
    # Get a list of all Comments on an Epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ThreadedComment>, Integer, Hash)>] Array<ThreadedComment> data, response status code and response headers
    def list_epic_comments_with_http_info(epic_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_epic_comments ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.list_epic_comments"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/comments'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ThreadedComment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_epic_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_epic_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Epic Stories
    # Get a list of all Stories in an Epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param get_epic_stories [GetEpicStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def list_epic_stories(epic_public_id, get_epic_stories, opts = {})
      data, _status_code, _headers = list_epic_stories_with_http_info(epic_public_id, get_epic_stories, opts)
      data
    end

    # List Epic Stories
    # Get a list of all Stories in an Epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param get_epic_stories [GetEpicStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def list_epic_stories_with_http_info(epic_public_id, get_epic_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_epic_stories ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.list_epic_stories"
      end
      # verify the required parameter 'get_epic_stories' is set
      if @api_client.config.client_side_validation && get_epic_stories.nil?
        fail ArgumentError, "Missing the required parameter 'get_epic_stories' when calling DefaultApi.list_epic_stories"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/stories'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_epic_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_epic_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_epic_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Epics
    # List Epics returns a list of all Epics and their attributes.
    # @param list_epics [ListEpics] 
    # @param [Hash] opts the optional parameters
    # @return [Array<EpicSlim>]
    def list_epics(list_epics, opts = {})
      data, _status_code, _headers = list_epics_with_http_info(list_epics, opts)
      data
    end

    # List Epics
    # List Epics returns a list of all Epics and their attributes.
    # @param list_epics [ListEpics] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EpicSlim>, Integer, Hash)>] Array<EpicSlim> data, response status code and response headers
    def list_epics_with_http_info(list_epics, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_epics ...'
      end
      # verify the required parameter 'list_epics' is set
      if @api_client.config.client_side_validation && list_epics.nil?
        fail ArgumentError, "Missing the required parameter 'list_epics' when calling DefaultApi.list_epics"
      end
      # resource path
      local_var_path = '/api/v3/epics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_epics)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EpicSlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_epics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_epics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Files
    # List Files returns a list of all UploadedFiles in the workspace.
    # @param [Hash] opts the optional parameters
    # @return [Array<UploadedFile>]
    def list_files(opts = {})
      data, _status_code, _headers = list_files_with_http_info(opts)
      data
    end

    # List Files
    # List Files returns a list of all UploadedFiles in the workspace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UploadedFile>, Integer, Hash)>] Array<UploadedFile> data, response status code and response headers
    def list_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_files ...'
      end
      # resource path
      local_var_path = '/api/v3/files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UploadedFile>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Group Stories
    # List the Stories assigned to the Group. (By default, limited to 1,000).
    # @param group_public_id [String] The unique ID of the Group.
    # @param list_group_stories [ListGroupStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def list_group_stories(group_public_id, list_group_stories, opts = {})
      data, _status_code, _headers = list_group_stories_with_http_info(group_public_id, list_group_stories, opts)
      data
    end

    # List Group Stories
    # List the Stories assigned to the Group. (By default, limited to 1,000).
    # @param group_public_id [String] The unique ID of the Group.
    # @param list_group_stories [ListGroupStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def list_group_stories_with_http_info(group_public_id, list_group_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_group_stories ...'
      end
      # verify the required parameter 'group_public_id' is set
      if @api_client.config.client_side_validation && group_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_public_id' when calling DefaultApi.list_group_stories"
      end
      # verify the required parameter 'list_group_stories' is set
      if @api_client.config.client_side_validation && list_group_stories.nil?
        fail ArgumentError, "Missing the required parameter 'list_group_stories' when calling DefaultApi.list_group_stories"
      end
      # resource path
      local_var_path = '/api/v3/groups/{group-public-id}/stories'.sub('{' + 'group-public-id' + '}', CGI.escape(group_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_group_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_group_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_group_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Groups
    # A group in our API maps to a \"Team\" within the Shortcut Product. A Team is a collection of Users that can be associated to Stories, Epics, and Iterations within Shortcut.
    # @param [Hash] opts the optional parameters
    # @return [Array<Group>]
    def list_groups(opts = {})
      data, _status_code, _headers = list_groups_with_http_info(opts)
      data
    end

    # List Groups
    # A group in our API maps to a \&quot;Team\&quot; within the Shortcut Product. A Team is a collection of Users that can be associated to Stories, Epics, and Iterations within Shortcut.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Group>, Integer, Hash)>] Array<Group> data, response status code and response headers
    def list_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_groups ...'
      end
      # resource path
      local_var_path = '/api/v3/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Group>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Iteration Stories
    # Get a list of all Stories in an Iteration.
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param get_iteration_stories [GetIterationStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def list_iteration_stories(iteration_public_id, get_iteration_stories, opts = {})
      data, _status_code, _headers = list_iteration_stories_with_http_info(iteration_public_id, get_iteration_stories, opts)
      data
    end

    # List Iteration Stories
    # Get a list of all Stories in an Iteration.
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param get_iteration_stories [GetIterationStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def list_iteration_stories_with_http_info(iteration_public_id, get_iteration_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_iteration_stories ...'
      end
      # verify the required parameter 'iteration_public_id' is set
      if @api_client.config.client_side_validation && iteration_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_public_id' when calling DefaultApi.list_iteration_stories"
      end
      # verify the required parameter 'get_iteration_stories' is set
      if @api_client.config.client_side_validation && get_iteration_stories.nil?
        fail ArgumentError, "Missing the required parameter 'get_iteration_stories' when calling DefaultApi.list_iteration_stories"
      end
      # resource path
      local_var_path = '/api/v3/iterations/{iteration-public-id}/stories'.sub('{' + 'iteration-public-id' + '}', CGI.escape(iteration_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_iteration_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_iteration_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_iteration_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Iterations
    # @param [Hash] opts the optional parameters
    # @return [Array<IterationSlim>]
    def list_iterations(opts = {})
      data, _status_code, _headers = list_iterations_with_http_info(opts)
      data
    end

    # List Iterations
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<IterationSlim>, Integer, Hash)>] Array<IterationSlim> data, response status code and response headers
    def list_iterations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_iterations ...'
      end
      # resource path
      local_var_path = '/api/v3/iterations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<IterationSlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_iterations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_iterations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Label Epics
    # List all of the Epics with the Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param [Hash] opts the optional parameters
    # @return [Array<EpicSlim>]
    def list_label_epics(label_public_id, opts = {})
      data, _status_code, _headers = list_label_epics_with_http_info(label_public_id, opts)
      data
    end

    # List Label Epics
    # List all of the Epics with the Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EpicSlim>, Integer, Hash)>] Array<EpicSlim> data, response status code and response headers
    def list_label_epics_with_http_info(label_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_label_epics ...'
      end
      # verify the required parameter 'label_public_id' is set
      if @api_client.config.client_side_validation && label_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_public_id' when calling DefaultApi.list_label_epics"
      end
      # resource path
      local_var_path = '/api/v3/labels/{label-public-id}/epics'.sub('{' + 'label-public-id' + '}', CGI.escape(label_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EpicSlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_label_epics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_label_epics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Label Stories
    # List all of the Stories with the Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param get_label_stories [GetLabelStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def list_label_stories(label_public_id, get_label_stories, opts = {})
      data, _status_code, _headers = list_label_stories_with_http_info(label_public_id, get_label_stories, opts)
      data
    end

    # List Label Stories
    # List all of the Stories with the Label.
    # @param label_public_id [Integer] The unique ID of the Label.
    # @param get_label_stories [GetLabelStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def list_label_stories_with_http_info(label_public_id, get_label_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_label_stories ...'
      end
      # verify the required parameter 'label_public_id' is set
      if @api_client.config.client_side_validation && label_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_public_id' when calling DefaultApi.list_label_stories"
      end
      # verify the required parameter 'get_label_stories' is set
      if @api_client.config.client_side_validation && get_label_stories.nil?
        fail ArgumentError, "Missing the required parameter 'get_label_stories' when calling DefaultApi.list_label_stories"
      end
      # resource path
      local_var_path = '/api/v3/labels/{label-public-id}/stories'.sub('{' + 'label-public-id' + '}', CGI.escape(label_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_label_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_label_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_label_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Labels
    # List Labels returns a list of all Labels and their attributes.
    # @param list_labels [ListLabels] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Label>]
    def list_labels(list_labels, opts = {})
      data, _status_code, _headers = list_labels_with_http_info(list_labels, opts)
      data
    end

    # List Labels
    # List Labels returns a list of all Labels and their attributes.
    # @param list_labels [ListLabels] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Label>, Integer, Hash)>] Array<Label> data, response status code and response headers
    def list_labels_with_http_info(list_labels, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_labels ...'
      end
      # verify the required parameter 'list_labels' is set
      if @api_client.config.client_side_validation && list_labels.nil?
        fail ArgumentError, "Missing the required parameter 'list_labels' when calling DefaultApi.list_labels"
      end
      # resource path
      local_var_path = '/api/v3/labels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_labels)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Label>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Linked Files
    # List Linked Files returns a list of all Linked-Files and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<LinkedFile>]
    def list_linked_files(opts = {})
      data, _status_code, _headers = list_linked_files_with_http_info(opts)
      data
    end

    # List Linked Files
    # List Linked Files returns a list of all Linked-Files and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LinkedFile>, Integer, Hash)>] Array<LinkedFile> data, response status code and response headers
    def list_linked_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_linked_files ...'
      end
      # resource path
      local_var_path = '/api/v3/linked-files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LinkedFile>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_linked_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_linked_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Members
    # List Members returns information about members of the organization.
    # @param list_members [ListMembers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Member>]
    def list_members(list_members, opts = {})
      data, _status_code, _headers = list_members_with_http_info(list_members, opts)
      data
    end

    # List Members
    # List Members returns information about members of the organization.
    # @param list_members [ListMembers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Member>, Integer, Hash)>] Array<Member> data, response status code and response headers
    def list_members_with_http_info(list_members, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_members ...'
      end
      # verify the required parameter 'list_members' is set
      if @api_client.config.client_side_validation && list_members.nil?
        fail ArgumentError, "Missing the required parameter 'list_members' when calling DefaultApi.list_members"
      end
      # resource path
      local_var_path = '/api/v3/members'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_members)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Member>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Milestone Epics
    # List all of the Epics within the Milestone.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param [Hash] opts the optional parameters
    # @return [Array<EpicSlim>]
    def list_milestone_epics(milestone_public_id, opts = {})
      data, _status_code, _headers = list_milestone_epics_with_http_info(milestone_public_id, opts)
      data
    end

    # List Milestone Epics
    # List all of the Epics within the Milestone.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EpicSlim>, Integer, Hash)>] Array<EpicSlim> data, response status code and response headers
    def list_milestone_epics_with_http_info(milestone_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_milestone_epics ...'
      end
      # verify the required parameter 'milestone_public_id' is set
      if @api_client.config.client_side_validation && milestone_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_public_id' when calling DefaultApi.list_milestone_epics"
      end
      # resource path
      local_var_path = '/api/v3/milestones/{milestone-public-id}/epics'.sub('{' + 'milestone-public-id' + '}', CGI.escape(milestone_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EpicSlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_milestone_epics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_milestone_epics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Milestones
    # List Milestones returns a list of all Milestones and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<Milestone>]
    def list_milestones(opts = {})
      data, _status_code, _headers = list_milestones_with_http_info(opts)
      data
    end

    # List Milestones
    # List Milestones returns a list of all Milestones and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Milestone>, Integer, Hash)>] Array<Milestone> data, response status code and response headers
    def list_milestones_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_milestones ...'
      end
      # resource path
      local_var_path = '/api/v3/milestones'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Milestone>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_milestones",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_milestones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Projects
    # List Projects returns a list of all Projects and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<Project>]
    def list_projects(opts = {})
      data, _status_code, _headers = list_projects_with_http_info(opts)
      data
    end

    # List Projects
    # List Projects returns a list of all Projects and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Project>, Integer, Hash)>] Array<Project> data, response status code and response headers
    def list_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_projects ...'
      end
      # resource path
      local_var_path = '/api/v3/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Project>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_projects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Repositories
    # List Repositories returns a list of all Repositories and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<Repository>]
    def list_repositories(opts = {})
      data, _status_code, _headers = list_repositories_with_http_info(opts)
      data
    end

    # List Repositories
    # List Repositories returns a list of all Repositories and their attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Repository>, Integer, Hash)>] Array<Repository> data, response status code and response headers
    def list_repositories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_repositories ...'
      end
      # resource path
      local_var_path = '/api/v3/repositories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Repository>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_repositories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Stories
    # List Stories returns a list of all Stories in a selected Project and their attributes.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param get_project_stories [GetProjectStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def list_stories(project_public_id, get_project_stories, opts = {})
      data, _status_code, _headers = list_stories_with_http_info(project_public_id, get_project_stories, opts)
      data
    end

    # List Stories
    # List Stories returns a list of all Stories in a selected Project and their attributes.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param get_project_stories [GetProjectStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def list_stories_with_http_info(project_public_id, get_project_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_stories ...'
      end
      # verify the required parameter 'project_public_id' is set
      if @api_client.config.client_side_validation && project_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_public_id' when calling DefaultApi.list_stories"
      end
      # verify the required parameter 'get_project_stories' is set
      if @api_client.config.client_side_validation && get_project_stories.nil?
        fail ArgumentError, "Missing the required parameter 'get_project_stories' when calling DefaultApi.list_stories"
      end
      # resource path
      local_var_path = '/api/v3/projects/{project-public-id}/stories'.sub('{' + 'project-public-id' + '}', CGI.escape(project_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_project_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Workflows
    # List Workflows returns a list of all Workflows in the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<Workflow>]
    def list_workflows(opts = {})
      data, _status_code, _headers = list_workflows_with_http_info(opts)
      data
    end

    # List Workflows
    # List Workflows returns a list of all Workflows in the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Workflow>, Integer, Hash)>] Array<Workflow> data, response status code and response headers
    def list_workflows_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_workflows ...'
      end
      # resource path
      local_var_path = '/api/v3/workflows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Workflow>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.list_workflows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_workflows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search
    # Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [SearchResults]
    def search(search, opts = {})
      data, _status_code, _headers = search_with_http_info(search, opts)
      data
    end

    # Search
    # Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the &#x60;next&#x60; value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchResults, Integer, Hash)>] SearchResults data, response status code and response headers
    def search_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling DefaultApi.search"
      end
      # resource path
      local_var_path = '/api/v3/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search)

      # return_type
      return_type = opts[:debug_return_type] || 'SearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Epics
    # Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [EpicSearchResults]
    def search_epics(search, opts = {})
      data, _status_code, _headers = search_epics_with_http_info(search, opts)
      data
    end

    # Search Epics
    # Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the &#x60;next&#x60; value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EpicSearchResults, Integer, Hash)>] EpicSearchResults data, response status code and response headers
    def search_epics_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_epics ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling DefaultApi.search_epics"
      end
      # resource path
      local_var_path = '/api/v3/search/epics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search)

      # return_type
      return_type = opts[:debug_return_type] || 'EpicSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.search_epics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_epics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Stories
    # Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [StorySearchResults]
    def search_stories(search, opts = {})
      data, _status_code, _headers = search_stories_with_http_info(search, opts)
      data
    end

    # Search Stories
    # Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the &#x60;next&#x60; value from the previous response can be used as the path and query string for the next page to ensure stable ordering.
    # @param search [Search] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorySearchResults, Integer, Hash)>] StorySearchResults data, response status code and response headers
    def search_stories_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_stories ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling DefaultApi.search_stories"
      end
      # resource path
      local_var_path = '/api/v3/search/stories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search)

      # return_type
      return_type = opts[:debug_return_type] || 'StorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.search_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Stories (Old)
    # Search Stories lets you search Stories based on desired parameters.
    # @param search_stories [SearchStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def search_stories_old(search_stories, opts = {})
      data, _status_code, _headers = search_stories_old_with_http_info(search_stories, opts)
      data
    end

    # Search Stories (Old)
    # Search Stories lets you search Stories based on desired parameters.
    # @param search_stories [SearchStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def search_stories_old_with_http_info(search_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_stories_old ...'
      end
      # verify the required parameter 'search_stories' is set
      if @api_client.config.client_side_validation && search_stories.nil?
        fail ArgumentError, "Missing the required parameter 'search_stories' when calling DefaultApi.search_stories_old"
      end
      # resource path
      local_var_path = '/api/v3/stories/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.search_stories_old",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_stories_old\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Story History
    # @param story_public_id [Integer] The ID of the Story.
    # @param [Hash] opts the optional parameters
    # @return [Array<History>]
    def story_history(story_public_id, opts = {})
      data, _status_code, _headers = story_history_with_http_info(story_public_id, opts)
      data
    end

    # Story History
    # @param story_public_id [Integer] The ID of the Story.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<History>, Integer, Hash)>] Array<History> data, response status code and response headers
    def story_history_with_http_info(story_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.story_history ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.story_history"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/history'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<History>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.story_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#story_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlink Productboard from Epic
    # This endpoint allows you to unlink a productboard epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unlink_productboard_from_epic(epic_public_id, opts = {})
      unlink_productboard_from_epic_with_http_info(epic_public_id, opts)
      nil
    end

    # Unlink Productboard from Epic
    # This endpoint allows you to unlink a productboard epic.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unlink_productboard_from_epic_with_http_info(epic_public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unlink_productboard_from_epic ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.unlink_productboard_from_epic"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/unlink-productboard'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.unlink_productboard_from_epic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unlink_productboard_from_epic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Category
    # Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.
    # @param category_public_id [Integer] The unique ID of the Category you wish to update.
    # @param update_category [UpdateCategory] 
    # @param [Hash] opts the optional parameters
    # @return [Category]
    def update_category(category_public_id, update_category, opts = {})
      data, _status_code, _headers = update_category_with_http_info(category_public_id, update_category, opts)
      data
    end

    # Update Category
    # Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.
    # @param category_public_id [Integer] The unique ID of the Category you wish to update.
    # @param update_category [UpdateCategory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def update_category_with_http_info(category_public_id, update_category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_category ...'
      end
      # verify the required parameter 'category_public_id' is set
      if @api_client.config.client_side_validation && category_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_public_id' when calling DefaultApi.update_category"
      end
      # verify the required parameter 'update_category' is set
      if @api_client.config.client_side_validation && update_category.nil?
        fail ArgumentError, "Missing the required parameter 'update_category' when calling DefaultApi.update_category"
      end
      # resource path
      local_var_path = '/api/v3/categories/{category-public-id}'.sub('{' + 'category-public-id' + '}', CGI.escape(category_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_category)

      # return_type
      return_type = opts[:debug_return_type] || 'Category'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Entity Template
    # Update an entity template's name or its contents.
    # @param entity_template_public_id [String] The unique ID of the template to be updated.
    # @param update_entity_template [UpdateEntityTemplate] Request parameters for changing either a template&#39;s name or any of   the attributes it is designed to pre-populate.
    # @param [Hash] opts the optional parameters
    # @return [EntityTemplate]
    def update_entity_template(entity_template_public_id, update_entity_template, opts = {})
      data, _status_code, _headers = update_entity_template_with_http_info(entity_template_public_id, update_entity_template, opts)
      data
    end

    # Update Entity Template
    # Update an entity template&#39;s name or its contents.
    # @param entity_template_public_id [String] The unique ID of the template to be updated.
    # @param update_entity_template [UpdateEntityTemplate] Request parameters for changing either a template&#39;s name or any of   the attributes it is designed to pre-populate.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityTemplate, Integer, Hash)>] EntityTemplate data, response status code and response headers
    def update_entity_template_with_http_info(entity_template_public_id, update_entity_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_entity_template ...'
      end
      # verify the required parameter 'entity_template_public_id' is set
      if @api_client.config.client_side_validation && entity_template_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_template_public_id' when calling DefaultApi.update_entity_template"
      end
      # verify the required parameter 'update_entity_template' is set
      if @api_client.config.client_side_validation && update_entity_template.nil?
        fail ArgumentError, "Missing the required parameter 'update_entity_template' when calling DefaultApi.update_entity_template"
      end
      # resource path
      local_var_path = '/api/v3/entity-templates/{entity-template-public-id}'.sub('{' + 'entity-template-public-id' + '}', CGI.escape(entity_template_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_entity_template)

      # return_type
      return_type = opts[:debug_return_type] || 'EntityTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_entity_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_entity_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Epic
    # Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Shortcut UI.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param update_epic [UpdateEpic] 
    # @param [Hash] opts the optional parameters
    # @return [Epic]
    def update_epic(epic_public_id, update_epic, opts = {})
      data, _status_code, _headers = update_epic_with_http_info(epic_public_id, update_epic, opts)
      data
    end

    # Update Epic
    # Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Shortcut UI.
    # @param epic_public_id [Integer] The unique ID of the Epic.
    # @param update_epic [UpdateEpic] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Epic, Integer, Hash)>] Epic data, response status code and response headers
    def update_epic_with_http_info(epic_public_id, update_epic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_epic ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.update_epic"
      end
      # verify the required parameter 'update_epic' is set
      if @api_client.config.client_side_validation && update_epic.nil?
        fail ArgumentError, "Missing the required parameter 'update_epic' when calling DefaultApi.update_epic"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_epic)

      # return_type
      return_type = opts[:debug_return_type] || 'Epic'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_epic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_epic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Epic Comment
    # This endpoint allows you to update a threaded Comment on an Epic.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param update_comment [UpdateComment] 
    # @param [Hash] opts the optional parameters
    # @return [ThreadedComment]
    def update_epic_comment(epic_public_id, comment_public_id, update_comment, opts = {})
      data, _status_code, _headers = update_epic_comment_with_http_info(epic_public_id, comment_public_id, update_comment, opts)
      data
    end

    # Update Epic Comment
    # This endpoint allows you to update a threaded Comment on an Epic.
    # @param epic_public_id [Integer] The ID of the associated Epic.
    # @param comment_public_id [Integer] The ID of the Comment.
    # @param update_comment [UpdateComment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThreadedComment, Integer, Hash)>] ThreadedComment data, response status code and response headers
    def update_epic_comment_with_http_info(epic_public_id, comment_public_id, update_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_epic_comment ...'
      end
      # verify the required parameter 'epic_public_id' is set
      if @api_client.config.client_side_validation && epic_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'epic_public_id' when calling DefaultApi.update_epic_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.update_epic_comment"
      end
      # verify the required parameter 'update_comment' is set
      if @api_client.config.client_side_validation && update_comment.nil?
        fail ArgumentError, "Missing the required parameter 'update_comment' when calling DefaultApi.update_epic_comment"
      end
      # resource path
      local_var_path = '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}'.sub('{' + 'epic-public-id' + '}', CGI.escape(epic_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'ThreadedComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_epic_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_epic_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update File
    # Update File updates the properties of an UploadedFile (but not its content).
    # @param file_public_id [Integer] The unique ID assigned to the file in Shortcut.
    # @param update_file [UpdateFile] 
    # @param [Hash] opts the optional parameters
    # @return [UploadedFile]
    def update_file(file_public_id, update_file, opts = {})
      data, _status_code, _headers = update_file_with_http_info(file_public_id, update_file, opts)
      data
    end

    # Update File
    # Update File updates the properties of an UploadedFile (but not its content).
    # @param file_public_id [Integer] The unique ID assigned to the file in Shortcut.
    # @param update_file [UpdateFile] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadedFile, Integer, Hash)>] UploadedFile data, response status code and response headers
    def update_file_with_http_info(file_public_id, update_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_file ...'
      end
      # verify the required parameter 'file_public_id' is set
      if @api_client.config.client_side_validation && file_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_public_id' when calling DefaultApi.update_file"
      end
      # verify the required parameter 'update_file' is set
      if @api_client.config.client_side_validation && update_file.nil?
        fail ArgumentError, "Missing the required parameter 'update_file' when calling DefaultApi.update_file"
      end
      # resource path
      local_var_path = '/api/v3/files/{file-public-id}'.sub('{' + 'file-public-id' + '}', CGI.escape(file_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_file)

      # return_type
      return_type = opts[:debug_return_type] || 'UploadedFile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group
    # @param group_public_id [String] The unique ID of the Group.
    # @param update_group [UpdateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Group]
    def update_group(group_public_id, update_group, opts = {})
      data, _status_code, _headers = update_group_with_http_info(group_public_id, update_group, opts)
      data
    end

    # Update Group
    # @param group_public_id [String] The unique ID of the Group.
    # @param update_group [UpdateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Group, Integer, Hash)>] Group data, response status code and response headers
    def update_group_with_http_info(group_public_id, update_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_group ...'
      end
      # verify the required parameter 'group_public_id' is set
      if @api_client.config.client_side_validation && group_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_public_id' when calling DefaultApi.update_group"
      end
      # verify the required parameter 'update_group' is set
      if @api_client.config.client_side_validation && update_group.nil?
        fail ArgumentError, "Missing the required parameter 'update_group' when calling DefaultApi.update_group"
      end
      # resource path
      local_var_path = '/api/v3/groups/{group-public-id}'.sub('{' + 'group-public-id' + '}', CGI.escape(group_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_group)

      # return_type
      return_type = opts[:debug_return_type] || 'Group'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Iteration
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param update_iteration [UpdateIteration] 
    # @param [Hash] opts the optional parameters
    # @return [Iteration]
    def update_iteration(iteration_public_id, update_iteration, opts = {})
      data, _status_code, _headers = update_iteration_with_http_info(iteration_public_id, update_iteration, opts)
      data
    end

    # Update Iteration
    # @param iteration_public_id [Integer] The unique ID of the Iteration.
    # @param update_iteration [UpdateIteration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Iteration, Integer, Hash)>] Iteration data, response status code and response headers
    def update_iteration_with_http_info(iteration_public_id, update_iteration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_iteration ...'
      end
      # verify the required parameter 'iteration_public_id' is set
      if @api_client.config.client_side_validation && iteration_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'iteration_public_id' when calling DefaultApi.update_iteration"
      end
      # verify the required parameter 'update_iteration' is set
      if @api_client.config.client_side_validation && update_iteration.nil?
        fail ArgumentError, "Missing the required parameter 'update_iteration' when calling DefaultApi.update_iteration"
      end
      # resource path
      local_var_path = '/api/v3/iterations/{iteration-public-id}'.sub('{' + 'iteration-public-id' + '}', CGI.escape(iteration_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_iteration)

      # return_type
      return_type = opts[:debug_return_type] || 'Iteration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_iteration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_iteration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Label
    # Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.
    # @param label_public_id [Integer] The unique ID of the Label you wish to update.
    # @param update_label [UpdateLabel] 
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def update_label(label_public_id, update_label, opts = {})
      data, _status_code, _headers = update_label_with_http_info(label_public_id, update_label, opts)
      data
    end

    # Update Label
    # Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.
    # @param label_public_id [Integer] The unique ID of the Label you wish to update.
    # @param update_label [UpdateLabel] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Integer, Hash)>] Label data, response status code and response headers
    def update_label_with_http_info(label_public_id, update_label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_label ...'
      end
      # verify the required parameter 'label_public_id' is set
      if @api_client.config.client_side_validation && label_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'label_public_id' when calling DefaultApi.update_label"
      end
      # verify the required parameter 'update_label' is set
      if @api_client.config.client_side_validation && update_label.nil?
        fail ArgumentError, "Missing the required parameter 'update_label' when calling DefaultApi.update_label"
      end
      # resource path
      local_var_path = '/api/v3/labels/{label-public-id}'.sub('{' + 'label-public-id' + '}', CGI.escape(label_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_label)

      # return_type
      return_type = opts[:debug_return_type] || 'Label'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_label",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Linked File
    # Updated Linked File allows you to update properties of a previously attached Linked-File.
    # @param linked_file_public_id [Integer] The unique identifier of the linked file.
    # @param update_linked_file [UpdateLinkedFile] 
    # @param [Hash] opts the optional parameters
    # @return [LinkedFile]
    def update_linked_file(linked_file_public_id, update_linked_file, opts = {})
      data, _status_code, _headers = update_linked_file_with_http_info(linked_file_public_id, update_linked_file, opts)
      data
    end

    # Update Linked File
    # Updated Linked File allows you to update properties of a previously attached Linked-File.
    # @param linked_file_public_id [Integer] The unique identifier of the linked file.
    # @param update_linked_file [UpdateLinkedFile] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkedFile, Integer, Hash)>] LinkedFile data, response status code and response headers
    def update_linked_file_with_http_info(linked_file_public_id, update_linked_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_linked_file ...'
      end
      # verify the required parameter 'linked_file_public_id' is set
      if @api_client.config.client_side_validation && linked_file_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_file_public_id' when calling DefaultApi.update_linked_file"
      end
      # verify the required parameter 'update_linked_file' is set
      if @api_client.config.client_side_validation && update_linked_file.nil?
        fail ArgumentError, "Missing the required parameter 'update_linked_file' when calling DefaultApi.update_linked_file"
      end
      # resource path
      local_var_path = '/api/v3/linked-files/{linked-file-public-id}'.sub('{' + 'linked-file-public-id' + '}', CGI.escape(linked_file_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_linked_file)

      # return_type
      return_type = opts[:debug_return_type] || 'LinkedFile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_linked_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_linked_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Milestone
    # Update Milestone can be used to update Milestone properties.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param update_milestone [UpdateMilestone] 
    # @param [Hash] opts the optional parameters
    # @return [Milestone]
    def update_milestone(milestone_public_id, update_milestone, opts = {})
      data, _status_code, _headers = update_milestone_with_http_info(milestone_public_id, update_milestone, opts)
      data
    end

    # Update Milestone
    # Update Milestone can be used to update Milestone properties.
    # @param milestone_public_id [Integer] The ID of the Milestone.
    # @param update_milestone [UpdateMilestone] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Milestone, Integer, Hash)>] Milestone data, response status code and response headers
    def update_milestone_with_http_info(milestone_public_id, update_milestone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_milestone ...'
      end
      # verify the required parameter 'milestone_public_id' is set
      if @api_client.config.client_side_validation && milestone_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'milestone_public_id' when calling DefaultApi.update_milestone"
      end
      # verify the required parameter 'update_milestone' is set
      if @api_client.config.client_side_validation && update_milestone.nil?
        fail ArgumentError, "Missing the required parameter 'update_milestone' when calling DefaultApi.update_milestone"
      end
      # resource path
      local_var_path = '/api/v3/milestones/{milestone-public-id}'.sub('{' + 'milestone-public-id' + '}', CGI.escape(milestone_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_milestone)

      # return_type
      return_type = opts[:debug_return_type] || 'Milestone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_milestone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_milestone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Multiple Stories
    # Update Multiple Stories allows you to make changes to numerous stories at once.
    # @param update_stories [UpdateStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<StorySlim>]
    def update_multiple_stories(update_stories, opts = {})
      data, _status_code, _headers = update_multiple_stories_with_http_info(update_stories, opts)
      data
    end

    # Update Multiple Stories
    # Update Multiple Stories allows you to make changes to numerous stories at once.
    # @param update_stories [UpdateStories] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<StorySlim>, Integer, Hash)>] Array<StorySlim> data, response status code and response headers
    def update_multiple_stories_with_http_info(update_stories, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_multiple_stories ...'
      end
      # verify the required parameter 'update_stories' is set
      if @api_client.config.client_side_validation && update_stories.nil?
        fail ArgumentError, "Missing the required parameter 'update_stories' when calling DefaultApi.update_multiple_stories"
      end
      # resource path
      local_var_path = '/api/v3/stories/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_stories)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StorySlim>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_multiple_stories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_multiple_stories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Project
    # Update Project can be used to change properties of a Project.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param update_project [UpdateProject] 
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def update_project(project_public_id, update_project, opts = {})
      data, _status_code, _headers = update_project_with_http_info(project_public_id, update_project, opts)
      data
    end

    # Update Project
    # Update Project can be used to change properties of a Project.
    # @param project_public_id [Integer] The unique ID of the Project.
    # @param update_project [UpdateProject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def update_project_with_http_info(project_public_id, update_project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_project ...'
      end
      # verify the required parameter 'project_public_id' is set
      if @api_client.config.client_side_validation && project_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_public_id' when calling DefaultApi.update_project"
      end
      # verify the required parameter 'update_project' is set
      if @api_client.config.client_side_validation && update_project.nil?
        fail ArgumentError, "Missing the required parameter 'update_project' when calling DefaultApi.update_project"
      end
      # resource path
      local_var_path = '/api/v3/projects/{project-public-id}'.sub('{' + 'project-public-id' + '}', CGI.escape(project_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_project)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Story
    # Update Story can be used to update Story properties.
    # @param story_public_id [Integer] The unique identifier of this story.
    # @param update_story [UpdateStory] 
    # @param [Hash] opts the optional parameters
    # @return [Story]
    def update_story(story_public_id, update_story, opts = {})
      data, _status_code, _headers = update_story_with_http_info(story_public_id, update_story, opts)
      data
    end

    # Update Story
    # Update Story can be used to update Story properties.
    # @param story_public_id [Integer] The unique identifier of this story.
    # @param update_story [UpdateStory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Story, Integer, Hash)>] Story data, response status code and response headers
    def update_story_with_http_info(story_public_id, update_story, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_story ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.update_story"
      end
      # verify the required parameter 'update_story' is set
      if @api_client.config.client_side_validation && update_story.nil?
        fail ArgumentError, "Missing the required parameter 'update_story' when calling DefaultApi.update_story"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_story)

      # return_type
      return_type = opts[:debug_return_type] || 'Story'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_story",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_story\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Story Comment
    # Update Comment replaces the text of the existing Comment.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment
    # @param update_story_comment [UpdateStoryComment] 
    # @param [Hash] opts the optional parameters
    # @return [StoryComment]
    def update_story_comment(story_public_id, comment_public_id, update_story_comment, opts = {})
      data, _status_code, _headers = update_story_comment_with_http_info(story_public_id, comment_public_id, update_story_comment, opts)
      data
    end

    # Update Story Comment
    # Update Comment replaces the text of the existing Comment.
    # @param story_public_id [Integer] The ID of the Story that the Comment is in.
    # @param comment_public_id [Integer] The ID of the Comment
    # @param update_story_comment [UpdateStoryComment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoryComment, Integer, Hash)>] StoryComment data, response status code and response headers
    def update_story_comment_with_http_info(story_public_id, comment_public_id, update_story_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_story_comment ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.update_story_comment"
      end
      # verify the required parameter 'comment_public_id' is set
      if @api_client.config.client_side_validation && comment_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_public_id' when calling DefaultApi.update_story_comment"
      end
      # verify the required parameter 'update_story_comment' is set
      if @api_client.config.client_side_validation && update_story_comment.nil?
        fail ArgumentError, "Missing the required parameter 'update_story_comment' when calling DefaultApi.update_story_comment"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/comments/{comment-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'comment-public-id' + '}', CGI.escape(comment_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_story_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'StoryComment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_story_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_story_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Story Link
    # Updates the stories and/or the relationship for the given Story Link.
    # @param story_link_public_id [Integer] The unique ID of the Story Link.
    # @param update_story_link [UpdateStoryLink] 
    # @param [Hash] opts the optional parameters
    # @return [StoryLink]
    def update_story_link(story_link_public_id, update_story_link, opts = {})
      data, _status_code, _headers = update_story_link_with_http_info(story_link_public_id, update_story_link, opts)
      data
    end

    # Update Story Link
    # Updates the stories and/or the relationship for the given Story Link.
    # @param story_link_public_id [Integer] The unique ID of the Story Link.
    # @param update_story_link [UpdateStoryLink] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoryLink, Integer, Hash)>] StoryLink data, response status code and response headers
    def update_story_link_with_http_info(story_link_public_id, update_story_link, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_story_link ...'
      end
      # verify the required parameter 'story_link_public_id' is set
      if @api_client.config.client_side_validation && story_link_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_link_public_id' when calling DefaultApi.update_story_link"
      end
      # verify the required parameter 'update_story_link' is set
      if @api_client.config.client_side_validation && update_story_link.nil?
        fail ArgumentError, "Missing the required parameter 'update_story_link' when calling DefaultApi.update_story_link"
      end
      # resource path
      local_var_path = '/api/v3/story-links/{story-link-public-id}'.sub('{' + 'story-link-public-id' + '}', CGI.escape(story_link_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_story_link)

      # return_type
      return_type = opts[:debug_return_type] || 'StoryLink'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_story_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_story_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Task
    # Update Task can be used to update Task properties.
    # @param story_public_id [Integer] The unique identifier of the parent Story.
    # @param task_public_id [Integer] The unique identifier of the Task you wish to update.
    # @param update_task [UpdateTask] 
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def update_task(story_public_id, task_public_id, update_task, opts = {})
      data, _status_code, _headers = update_task_with_http_info(story_public_id, task_public_id, update_task, opts)
      data
    end

    # Update Task
    # Update Task can be used to update Task properties.
    # @param story_public_id [Integer] The unique identifier of the parent Story.
    # @param task_public_id [Integer] The unique identifier of the Task you wish to update.
    # @param update_task [UpdateTask] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Integer, Hash)>] Task data, response status code and response headers
    def update_task_with_http_info(story_public_id, task_public_id, update_task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_task ...'
      end
      # verify the required parameter 'story_public_id' is set
      if @api_client.config.client_side_validation && story_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'story_public_id' when calling DefaultApi.update_task"
      end
      # verify the required parameter 'task_public_id' is set
      if @api_client.config.client_side_validation && task_public_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_public_id' when calling DefaultApi.update_task"
      end
      # verify the required parameter 'update_task' is set
      if @api_client.config.client_side_validation && update_task.nil?
        fail ArgumentError, "Missing the required parameter 'update_task' when calling DefaultApi.update_task"
      end
      # resource path
      local_var_path = '/api/v3/stories/{story-public-id}/tasks/{task-public-id}'.sub('{' + 'story-public-id' + '}', CGI.escape(story_public_id.to_s)).sub('{' + 'task-public-id' + '}', CGI.escape(task_public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_task)

      # return_type
      return_type = opts[:debug_return_type] || 'Task'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Files
    # Upload Files uploads one or many files and optionally associates them with a story.    Use the multipart/form-data content-type to upload.    Each `file` key should contain a separate file.    Each UploadedFile's name comes from the Content-Disposition header \"filename\" directive for that field.
    # @param file0 [File] A file upload. At least one is required.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :story_id The story ID that these files will be associated with.
    # @option opts [File] :file1 Optional additional files.
    # @option opts [File] :file2 Optional additional files.
    # @option opts [File] :file3 Optional additional files.
    # @return [Array<UploadedFile>]
    def upload_files(file0, opts = {})
      data, _status_code, _headers = upload_files_with_http_info(file0, opts)
      data
    end

    # Upload Files
    # Upload Files uploads one or many files and optionally associates them with a story.    Use the multipart/form-data content-type to upload.    Each &#x60;file&#x60; key should contain a separate file.    Each UploadedFile&#39;s name comes from the Content-Disposition header \&quot;filename\&quot; directive for that field.
    # @param file0 [File] A file upload. At least one is required.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :story_id The story ID that these files will be associated with.
    # @option opts [File] :file1 Optional additional files.
    # @option opts [File] :file2 Optional additional files.
    # @option opts [File] :file3 Optional additional files.
    # @return [Array<(Array<UploadedFile>, Integer, Hash)>] Array<UploadedFile> data, response status code and response headers
    def upload_files_with_http_info(file0, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_files ...'
      end
      # verify the required parameter 'file0' is set
      if @api_client.config.client_side_validation && file0.nil?
        fail ArgumentError, "Missing the required parameter 'file0' when calling DefaultApi.upload_files"
      end
      # resource path
      local_var_path = '/api/v3/files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file0'] = file0
      form_params['story_id'] = opts[:'story_id'] if !opts[:'story_id'].nil?
      form_params['file1'] = opts[:'file1'] if !opts[:'file1'].nil?
      form_params['file2'] = opts[:'file2'] if !opts[:'file2'].nil?
      form_params['file3'] = opts[:'file3'] if !opts[:'file3'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UploadedFile>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_token']

      new_options = opts.merge(
        :operation => :"DefaultApi.upload_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
